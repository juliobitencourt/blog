-- MySQL dump 10.13  Distrib 8.0.26, for Linux (x86_64)
--
-- Host: 127.0.0.1    Database: juliobitencourt
-- ------------------------------------------------------
-- Server version	8.0.26-0ubuntu0.20.04.2

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `failed_jobs`
--

DROP TABLE IF EXISTS `failed_jobs`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `failed_jobs` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `connection` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `queue` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `payload` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `exception` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `failed_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `failed_jobs`
--

LOCK TABLES `failed_jobs` WRITE;
/*!40000 ALTER TABLE `failed_jobs` DISABLE KEYS */;
/*!40000 ALTER TABLE `failed_jobs` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `migrations`
--

DROP TABLE IF EXISTS `migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `migrations` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `migration` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `migrations`
--

LOCK TABLES `migrations` WRITE;
/*!40000 ALTER TABLE `migrations` DISABLE KEYS */;
INSERT INTO `migrations` VALUES (1,'2014_10_12_000000_create_users_table',1),(2,'2014_10_12_100000_create_password_resets_table',1),(3,'2019_08_19_000000_create_failed_jobs_table',1),(4,'2019_09_27_181323_create_posts_table',1),(5,'2020_04_21_170343_add_language_to_posts',2),(6,'2020_11_09_184754_create_published_at_column',3);
/*!40000 ALTER TABLE `migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `password_resets`
--

DROP TABLE IF EXISTS `password_resets`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `password_resets` (
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  KEY `password_resets_email_index` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `password_resets`
--

LOCK TABLES `password_resets` WRITE;
/*!40000 ALTER TABLE `password_resets` DISABLE KEYS */;
/*!40000 ALTER TABLE `password_resets` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `posts` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `published_at` timestamp NULL DEFAULT NULL,
  `language` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `slug` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `description` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `body` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (11,'2020-03-10 13:37:16','pt-BR','esta-e-a-melhor-hora-para-voce-se-tornar-um-desenvolvedor-de-software','Esta é a melhor hora para você se tornar um desenvolvedor de software','Desenvolver software é difícil. Só permanecem nesta profissão aqueles que gostam do que fazem e gostam de aprender algo novo todo dia.','_Artigo publicado originalmente no [medium](https://medium.com/@juliobitencourt/esta-%C3%A9-a-melhor-hora-para-voc%C3%AA-se-tornar-um-desenvolvedor-de-software-7a1c24b895b8)_\n\n> A internet ultrapassou os celulares, invadiu as coisas e o digital nos cercou por todos os lados. A boa notícia é: quem faz tudo isto acontecer — ainda — é o bom e velho programador.\n\nQuando eu era criança, desmontava todos os meus brinquedos para pegar as peças; os motores eram os meus favoritos. Não tenho nenhum brinquedo de infância guardado.\n\nMinha mãe ficava furiosa e dizia que eu não cuidava das minhas coisas. Mas com as peças eu fazia novos brinquedos, o que era muito mais legal. Eu gostava mesmo era de saber como as coisas funcionavam. [Acho que é isto que eu realmente amo fazer](http://www.akitaonrails.com/2014/09/13/off-topic-nao-faca-o-que-voce-acha-que-ama#.VUqlE9NViko).\n\nO caminho natural era que eu estudasse mecânica ou eletrônica. Ver meus amigos da época estudando no SENAI não me animou muito, sobrou a eletrônica.\n\n## Salário de frentista paga escola\n\nMeu pai até poderia pagar meus estudos, mas falou que se eu quisesse estudar em escola de bacana teria que pagar ao menos a metade da mensalidade com meu próprio dinheiro.\n\nFiquei puto como um bom adolescente, mas era minha única opção. Então corri atrás de algum emprego. No caso foi o de ajudante geral em um restaurante.\n\nMais tarde, já matriculado, ouvi de um dos professores uma frase que me acompanha até hoje.\n> Salário de frentista paga sua escola.\n\nA má notícia era que mesmo trabalhando e contando com a ajuda do meu pai, a grana não pagaria o curso técnico de eletrônica na melhor escola da época. Sobrou o curso de Processamento de Dados. Era o que eu tínha para o momento.\n\nSe você não desistiu do texto até aqui deve estar pensando: o que diabos a história de um moleque da periferia tem a ver com o mercado atual de desenvolvimento de software?\n\nSer programador não era uma opção pois eu não conhecia nenhum. Não tinha a mínima ideia do que aquilo significava. Mas eu precisava estudar algo e humanas estava fora de cogitação.\n\n## Programar é Grátis\n\nO motivo de eu ter contado a história acima é que desde 1998, quando eu comecei, programar já era uma [atividade muito barata](http://marcogomes.com/blog/2008/campanha-programar-e-gratis) — ou grátis — se você não levar em conta o custo do computador.\n\nA revolução digital que eu citei lá no começo trouxe uma democratização na produção de conteúdo digital e de produtos.\n\nA velha história do nerd que no escuro do quarto constrói uma empresa multimilionária, ou da banda de garagem que é a sensação do Youtube, já são verdades há um bom tempo.\n\nIsto só é possível com a queda de preço de computadores e dispositivos com capacidade computacional muito elevada. Além da internet, é claro.\n\nNos tornamos escritores, *videomakers*, cantores e toda a sorte de atividades possíveis. A programação não só usufrui de toda esta revolução, como torna tudo isto possível.\n\nBasta ligar o seu computador, buscar tutoriais no Google, ler alguns e-books e **boom**! Você já é um programador.\n\nCalma lá. Você será no máximo um sobrinho neste primeiro momento ☺\n\n## Como ser um bom profissional desde o início\n\nAs dicas que seguem são opiniões próprias. Coisas que funcionaram pra mim durante todos estes anos. Use o bom senso ao aplicar ou não em sua carreira.\n\n### Estude lógica e resolva problemas\n\n*Hello Worlds* são fantásticos quando estamos começando em uma nova linguagem. Mas logo após o primeiro teste tente resolver algum problema; existente ou não, seu, da empresa ou até mesmo de sua escola.\n\nEu já perdi muito tempo lendo documentações de linguagens. Quando ia iniciar algo já havia esquecido o começo. Quando você estuda e coloca em prática aprende e fixa o conhecimento.\n\nMesmo assim leia toda a documentação sempre que possível☺\n\nApós aprender a lógica básica de programação e resolver alguns pepinos siga estes passos:\n\n- 1 - Estude Orientação a Objetos\n- 2 - Estude Design Patterns\n\nParece simples né? Mas Orientação a Objetos e Design Patterns são complexos. Você ficará anos estudando e estes caras possivelmente vão te acompanhar por toda a sua carreira.\n\n### Aprenda inglês. Ponto.\n\nMuitos iniciantes me perguntam qual linguagem eles devem aprender. Não costumo opinar neste ponto pois não tenho experiência em muitas linguagens.\n\nEu diria que antes de aprender uma linguagem você deverá aprender um idioma: inglês.\n\nIsto é óbvio, mas é negligenciado pela maioria dos desenvolvedores medianos que eu conheço. Gente com bom potencial, mas que não evolui por conta do idioma.\n\nVocê será um bom programador sem saber inglês? Possivelmente sim. Você será um programador acima da média? Provavelmente não.\n\n### Estude muita teoria, mas não compre livros de código\n\nAs ferramentas são indispensáveis para todo profissional. Mas sem o embasamento teórico o máximo que você conseguirá fazer é um código de má qualidade usando o framework mais descolado do momento.\n\nQuando a linguagem ou a ferramenta X ganhar uma nova versão, seus livros ficarão obsoletos, virando ótimos suportes para monitor.\n\nLeia livros teóricos, que sobrevivem ao tempo. Leia sobre Orientação a Objetos, Design Patterns, Object Calisthenics, Metodologias Ágeis, etc.\n\n### Peça ajuda e saiba se comportar em listas de discussão\n\nTenho presenciado um fenômeno interessante. Muitos profissionais veteranos, referências em várias áreas, estão abandonando fóruns, grupos, e listas de discussão.\n\nMuito disso por conta de mau comportamento dos participantes (iniciantes ou não), *flame wars, bulling, trolling* entre outras coisas.\n\nAo contrário do que dizem por aí, existem sim as perguntas idiotas. Não são as perguntas em si, mas a forma que são feitas e o contexto. E isto gera stress nos moderadores e demais participantes.\n\nLeia as regras do grupo, dê exemplos, conte o cenário no qual você se encontra quando está enfrentando um problema ou uma mensagem ameaçadora de erro.\n> Não seja preguiçoso na hora de perguntar, pois os que podem te ajudar terão a mesma preguiça para responder.\n\n### Show your code\n\nUma das melhores formas de aprender e ter segurança de que se está no caminho certo é mostrando seu trabalho.\n\nCrie projetos open source desde o início e não repita meu erro: só recentemente eu criei coragem de colocar um [projeto próprio no github](https://github.com/juliobitencourt/).\n\nVocê conseguirá *feedback* do seu código e poderá evoluir de maneira muito mais rápida.\n\n## Conclusão\n\nDesenvolver software é difícil. Só permanecem nesta profissão aqueles que gostam do que fazem e gostam de aprender algo novo todo dia.\n\nSe este texto te deixou com mais dúvidas do que respostas fique tranquilo. Deixe um comentário e colabore.\n\nNo meu twitter eu posto — quase diariamente — muitos links interessantes sobre diversas áreas do desenvolvimento de software web.\n\nVocê pode me seguir por lá ☺[@juliobitencourt](https://www.twitter.com/juliobitencourt)','2020-03-10 13:37:16','2020-04-21 18:06:25'),(12,'2020-03-10 14:04:12','en','how-to-become-a-php-developer-in-only-10-hours-or-less','How to become a PHP developer in only 10 hours or less','A quick guide to a web developer enter the PHP World. Tailored for Laravel Framework and using Laracasts.','_Artigo publicado originalmente no [medium](https://medium.com/@juliobitencourt/how-to-become-a-php-developer-in-only-10-hours-or-less-cd1a7680bf00)_\n\nA quick guide to a web developer enter the PHP World. Tailored for Laravel Framework and using Laracasts.\n\nYou have to know the basics of…\n\n* How to program (really???)\n\n* HTML and CSS\n\n* A [laracasts](http://laracasts.com) subscription\n\nYou can also\n\n* Get the topics and learn without the laracasts subscription by googling\n\n* Buy only the listed Laracasts lessons\n\n### PHP for beginners\n\nFirst things first. In this 25 lessons series you\'ll learn the very basic topics, such as how to install PHP and some hot topics like database, dependency injection and autoloading.\n[**The PHP Practitioner**\n*We all start somewhere. When it comes to web development with PHP, well, your first stop is this series. Designed…*laracasts.com](https://laracasts.com/series/php-for-beginners)\n\n### OOP in PHP\n\nYou know, classes, inheritance, interfaces. The basics of object oriented programming in PHP.\n\nI would tell you that from this point, you’re already able to program in PHP.\n[**Object-Oriented Bootcamp**\n*As wonderful as Laravel is, it does assume that you have a basic understanding of object-oriented programming. If you…*laracasts.com](https://laracasts.com/series/object-oriented-bootcamp-in-php)\n\n### Design Patterns in PHP\n\nYou don’t need to reinvent the wheel. Design patterns are common solutions for common problems that other programmers has already faced.\n[**Design Patterns in PHP**\n*A design pattern is a common solution to a common problem. Nothing more, nothing less. And, while some of these…*laracasts.com](https://laracasts.com/series/design-patterns-in-php)\n\n### SOLID Principles in PHP\n\nSOLID Principles: The guidelines for a better developer.\n[**SOLID Principles in PHP**\n*SOLID represents a series of guidelines that developers can use to, if done well, simplify and clarify their code…*laracasts.com](https://laracasts.com/series/solid-principles-in-php)\n\n## Bonus\n\n### PHP The Right Way\n\nGoing further. Check this awesome guide out. You can contribute to the project too.\n\n[http://www.phptherightway.com/](http://www.phptherightway.com/)\n\n### PSR\n\nThe PHP Standards Recommendations, created by the PHP Framework Interop Group.\n[**PHP Standards Recommendations - PHP-FIG**\n*We\'re a group of established PHP projects whose goal is to talk about commonalities between our projects and find ways…*www.php-fig.org](http://www.php-fig.org/psr/)\n\n### Composer\n\nDependency manager for PHP.\n[**PHP Tutorial: Getting Started with Composer | Codementor**\n*Composer is a dependency manager for PHP. Composer is used in all modern PHP frameworks (Symfony, Laravel) and is one…*www.codementor.io](https://www.codementor.io/php/tutorial/composer-install-php-dependency-manager)\n\n### Laravel From Scratch\n\nLaravel From Scratch is an always fresh series covering the last version of this awesome framework.\n\n[www.laravelfromscratch.com](http://www.laravelfromscratch.com)\n\nThanks for reading ;)\n\n*P.S. If you enjoyed this article, click the ♥️ and share it with your friends.*\n\nJoin my 700+ Twitter followers to get more information about PHP development. [https://twitter.com/juliobitencourt](https://twitter.com/juliobitencourt)','2020-03-10 14:04:12','2020-04-21 17:56:42'),(13,'2020-03-10 14:07:28','pt-BR','sobre-sair-da-zona-de-conforto-e-mudar-a-carreira-em-apenas-3-anos','Sobre sair da zona de conforto e mudar a carreira em apenas 3 anos','No final de 2013 eu havia quebrado minha agência web e me quebrado por consequência. Três anos depois eu virei o jogo!','_Artigo publicado originalmente no [medium](https://medium.com/@juliobitencourt/sobre-sair-da-zona-de-conforto-e-mudar-a-carreira-em-apenas-3-anos-c748ccc5fd5b)_\n\nNo final de 2013 eu havia quebrado minha agência web e me quebrado por consequência.\n\nTrês anos depois eu me vi questionando minha carreira e se estava fazendo algo realmente notável e deixando algum legado.\n\nSerá que todas estas horas batendo no teclado e com a cara enfiada em uma tela são só este vai e vem idiota de e-mails?\n\nNeste momento eu resolvi virar o disco e analisar o que de bom estava fazendo na vida — ao menos na profissional — e constatei: eu tenho feito coisa pra caralho, e coisa muito boa por sinal.\n> # A maior parte das coisas que eu faço hoje, eu não sabia fazer 2 anos atrás.\n\nComo eu disse no começo do texto, no final de 2013 eu estava quebrado.\n\nPassei 2014 inteiro juntando os cacos e colocando a casa em ordem.\n\nJá em 2015 eu tive a oportunidade de iniciar um novo projeto muito desafiador, algo que nunca tinha feito antes.\n\nEu precisei recrutar programadores, escolher uma *stack* de desenvolvimento, aprender sobre micro serviços, cloud computing, marketing, vendas, etc.\n\nO medo de falhar era enorme, e ainda tinha a tarefa mais difícil de todas: liderar um time, um time que começou comigo e hoje já conta com 7 pessoas.\n\nHoje lidero o desenvolvimento de um produto completo que já está conquistando os primeiros clientes.\n\nIsto mostra como é importante sair da zona de conforto, mesmo que seja empurrado.\n\nSe você se identificou com esta pequena história, me acompanhe nesta reflexão e veja como, mesmo sem perceber, eu **reinventei minha carreira** em apenas 3 anos.\n\nDurante as próximas semanas eu vou detalhar cada um dos desafios que estou enfrentando e o que estou aprendendo durante esta jornada.\n\nVou começar contando qual foi o processo que eu usei para organizar o projeto no início.\n\nMe siga no [Twitter](https://twitter.com/juliobitencourt) ou aqui mesmo no Medium para ficar sabendo quando os posts forem publicados.\n\n**Atualização:**\n\n[Como mudei minha carreira — parte II — Organizando o projeto e gerenciando uma equipe de desenvolvimento ágil](https://medium.com/@juliobitencourt/como-mudei-minha-carreira-parte-ii-organizando-o-projeto-e-gerenciando-uma-equipe-de-470365572331)','2020-03-10 14:07:28','2020-04-21 18:06:25'),(14,'2020-03-10 14:10:19','pt-BR','como-mudei-minha-carreira-parte-ii-organizando-o-projeto-e-gerenciando-uma-equipe-de-desenvolvimento','Como mudei minha carreira — parte II — Organizando o projeto e gerenciando uma equipe de desenvolvimento','Organizar um time de desenvolvimento e criar um produto do zero não é tarefa fácil. Mas vivemos em uma era onde o acesso às informações permite que, com foco e dedicação, você aprenda muito.','_Artigo publicado originalmente no [medium](https://medium.com/@juliobitencourt/como-mudei-minha-carreira-parte-ii-organizando-o-projeto-e-gerenciando-uma-equipe-de-470365572331)_\n\nA importância de estar sempre atualizado\n\n![Photo by [Glenn Carstens-Peters](https://unsplash.com/photos/RLw-UC03Gwc?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)](https://cdn-images-1.medium.com/max/8512/1*e7O7A5rM79ng6b8Dc3EbEg.jpeg)*Photo by [Glenn Carstens-Peters](https://unsplash.com/photos/RLw-UC03Gwc?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)*\n\n*Este é o primeiro artigo relatando os passos que eu dei para mudar minha carreira em aproximadamente 3 anos, depois de quebrar minha empresa. A introdução da série você pode ler [clicando aqui](https://medium.com/@juliobitencourt/sobre-sair-da-zona-de-conforto-e-mudar-a-carreira-em-apenas-3-anos-c748ccc5fd5b).*\n> - Você conhece SOLR?\n> - Conheço, nunca usei mas conheço sim. Mas olha, tem um tal de Elasticsearch aí que é bem legal! Podemos dar uma olhada nele. Ambos são baseados no Apache Lucene.\n\nVocê conhece SOLR. Foi a pergunta que eu ouvi em um evento e que foi o gatilho para minha empreitada atual.\n\nMinha resposta foi dada apenas com conhecimento teórico. Eu nunca tinha usado nenhuma daquelas ferramentas.\n\nEu sempre fui um [consumidor voraz de conteúdos técnicos](https://medium.com/@juliobitencourt/an%C3%A1lise-sobre-os-podcasts-de-tecnologia-que-estou-ouvindo-atualmente-12b98b8574f4) sobre desenvolvimento de software e tecnologia em geral. Me lembro do saudoso Google Reader, onde eu tinha centenas de inscrições em RSS de blogs técnicos.\n\nSou programador PHP desde 2003, mas também procuro acompanhar outras comunidades de desenvolvimento web. Desta forma, saberei quem procurar quando precisar de algo fora do mundo [LAMP](https://pt.wikipedia.org/wiki/LAMP), como foi o caso da pergunta do início deste texto.\n> Se eu tivesse oito horas para derrubar uma árvore, passaria seis afiando meu machado.\n\n**Abraham Lincoln**\n\nE foi em um evento de Ruby/Python, ou seja, nada a ver com PHP, que eu vi uma das melhores palestras sobre agilidade e gestão de times.\n\nConteúdo que não tinha tanta aplicação prática para mim naquele momento, mas que me deixou com a sensação de que se eu tivesse visto aquilo antes poderia ter mudado a história da minha empresa. Vida que segue.\n\nMeses depois, quando surgiu a oportunidade de criar um novo projeto de software, me lembrei da palestra do [Fábio Akita](http://www.akitaonrails.com/) – @akitaonrails – na Rupy 2014 em São José dos Campos.\n\nEle resumiu em 45 minutos, quase todos os tópicos que norteiam o gerenciamento de um time de desenvolvimento ágil de software, relatando como ele mesmo trabalha na empresa em que é sócio.\n\nNa palestra o Fábio Akita cita as melhores práticas, problemas frequentes, ferramentas, e principalmente: comportamento durante o dia a dia de uma equipe de desenvolvimento ágil de software.\n\nRecomendo que você pare a leitura agora, assista, e depois volte para cá. Vale a pena, eu garanto.\n\n<center><iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/gIqtp5lBTcg\" frameborder=\"0\" allowfullscreen></iframe></center>\n\n## Pragmatismo\n\nEra preciso encarar o contexto de uma startup: recursos limitados e incerteza.\n\nEm um cenário assim, qualquer decisão errada pode colocar tudo a perder, pois não existe espaço — nem dinheiro — para voltar e consertar o trabalho que pode ter levado meses para ser concluído.\n\nAs práticas de desenvolvimento ágil de software foram criadas por engenheiros de software que sofriam na pele a falha na entrega e atrasos constantes.\n\n*Recomendo a leitura de dois livros: [Extreme Programming](https://www.amazon.com.br/Extreme-Programming-Vin%C3%ADcius-Manh%C3%A3es-Teles/dp/857522400X?tag=goog0ef-20&smid=A1ZZFT5FULY4LN&ascsubtag=358d41e0-71fc-4294-a790-17a6ed0234ff) e [Lean Startup](https://www.amazon.com.br/Startup-Enxuta-Eric-Ries-ebook/dp/B00A3C4GAK/ref=sr_1_1?ie=UTF8&qid=1509046328&sr=8-1&keywords=a+startup+enxuta). Estes livros foram muito úteis para mim.*\n\nOk. Vamos seguir as metodologias ágeis. E agora?\n\n## Mise en place – Organizando as ideias\n\nMapas mentais são, ao meu ver, a ferramenta ideal para organizar ideias em um cenário onde não se sabe exatamente quais são os passos necessários para atingir os objetivos.\n\nRecomendo o [Mindmup](https://www.mindmup.com/), que foi a ferramenta utilizada lá no início do projeto.\n\nPartindo do mapa mental listamos as principais funcionalidades do [Keeva](https://keeva.io/?utm_source=medium&utm_medium=blog&utm_campaign=gerenciamento-de-projetos-em-uma-equipe-agil) e criamos um roadmap de 6 meses de desenvolvimento.\n\nUtilizar mapas mentais foi essencial neste processo. Em 2 reuniões já tínhamos a visão geral do sistema e também da infraestrutura necessária para rodá-lo.\n\nA partir daí já poderíamos partir para o desenvolvimento. Só que não, antes era preciso montar o time. Falarei sobre isto em um post futuro.\n\nAlém do Mindmup, abaixo eu listo algumas ferramentas que utilizamos no dia a dia do time.\n\n## Código. Acima de tudo, código\n\nEscolhi o [Bitbucket](http://bitbucket.org) para o gerenciamento do código fonte do projeto. Você deve estar se perguntando: por que não github?\n\nSimples. No Bitbucket eu poderia usar repositórios privados na conta gratuita.\n\nLembra-se dos “recursos escassos” que eu citei acima? Então.\n\nMas hoje utilizamos a conta paga pois o time cresceu ?\n\nDesde o início utilizamos Pull Requests, que sempre passavam pela minha revisão. Hoje eu não faço mais a revisão, pois o time está maduro e os processos são (quase) sempre respeitados.\n\n**Dica:** Se você não usa Pull Requests e Code Review comece agora mesmo. O ganho de produtividade e qualidade no código é incrível. Recomento o [episódio 64](https://hipsters.tech/pull-requests-e-code-review-hipsters-64/) do podcast [Hipsters.tech](https://hipsters.tech/), que aborda exatamente **PRs e Code Review**.\n\nHoje utilizamos [GitFlow](http://nvie.com/posts/a-successful-git-branching-model/) para o gerenciamento de branches e para organizar o caos um pouco.\n\n## SCRUM? Bom, não sei.\n\nDemoramos para entrar nos eixos com relação ao SCRUM. Acredito que até hoje fazemos mais um “ScrumBut”, mas a metodologia está bem aderente ao nosso fluxo de trabalho.\n\nComeçamos com sprints semanais, reuniões de planning e review apenas. Nada funções estabelecidas (PO, Scrum Master, etc), retrospectiva ou daily meeting. O time era era muito pequeno e naquele momento utilizar todos os rituais do Scrum soava mais como uma burocracia desnecessária.\n\nA partir da reunião de planning o time fazia a pontuação das estórias, que eram colocadas no Pivotal Tracker e iniciava o desenvolvimento das funcionalidades.\n\nNotei que quando éramos fiéis aos processos as entregas eram feitas com grande qualidade e dentro dos prazos. Mas, quando surgia algum incêndio e atropelávamos as coisas, as entregas ficavam comprometidas.\n\nIsto era perceptível na velocidade registrada pelo Pivotal Tracker. Ponto para o Scrum.\n\n## Gerenciamento de tarefas\n\nO Pivotal Tracker foi a ferramenta escolhida para gerenciar o projeto puramente pela indicação feita na palestra do Fábio Akita, que eu citei acima neste texto.\n\nNão testei nenhuma outra que fosse voltada ao mesmo problema que o Pivotal resolve. Com excessão do Trello — que eu gosto muito e uso para gerenciar meu time de marketing — mas acredito que as duas não se comparam pois atendem demandas diferentes.\n\nO Pivotal Tracker é um software fantástico. Permite o gerenciamento detalhado das estórias, épicos, bugs, etc. Tudo bem alinhado às práticas ágeis como XP, Scrum e Kanban.\n\nRecomendo fortemente a utilização do Pivotal Tracker. É daquelas ferramentas que valem cada centavo investido.\n\nMas nenhuma ferramenta resolverá seus problemas se o comportamento das pessoas que compõem o time não estiver alinhado com os objetivos.\n\n## Comunicação\n\nEmbora eu não seja muito fã de comunicação assíncrona, ou melhor, não sou fã de quem trata comunicação [assíncrona como síncrona](https://m.signalvnoise.com/from-an-internal-basecamp-announcement-re-pings-ims-e0f61ec9e3bd), o slack foi a opção mais óbvia na hora de escolher o sistema de Instant Messaging para o time.\n\nMinha única crítica ao Slack no início do projeto era sua administração, que tinha uma UX sofrível, e a falta de threads, mas este problema foi [resolvido depois de um tempo](https://slackhq.com/threaded-messaging-comes-to-slack-417ffba054bd).\n\nÉ muito importante que você combine com seu time uma certa forma de etiqueta para comunicação, inclusive [na hora de pedir ajuda](https://medium.com/@osuissa/como-pedir-ajuda-para-um-programador-ee719e79d1da) sobre bugs ou dificuldades técnicas.\n\nUma boa comunicação é fator crítico do sucesso de um time, e o Scrum estimula a comunicação constante e aberta.\n\n## Conclusão\n\nOrganizar um time de desenvolvimento e criar um produto do zero não é tarefa fácil.\n\nMas vivemos em uma era onde o acesso às informações permite que, com foco e dedicação, você aprenda muito.\n\nÉ sempre importante frisar: faça uso das ferramentas. Um conjunto de softwares SaaS hoje custa muito menos do que as suítes de trabalho que só eram viáveis para grandes corporações alguns anos atrás.\n\nObrigado pela leitura!\n\n**Me siga no [Twitter](https://twitter.com/juliobitencourt) ou aqui mesmo no Medium para ficar sabendo quando os novos posts forem publicados.**','2020-03-10 14:10:19','2020-04-21 18:06:25'),(15,'2020-03-10 14:13:56','pt-BR','lista-de-podcasts-de-tecnologia-que-estou-ouvindo-atualmente','Análise sobre os podcasts de tecnologia que estou ouvindo atualmente','Comecei a ouvir podcasts há bastante tempo. Comecei pelo Fala Freela, passando pelo Grok Podcast e ZOFE — Zone of Front Enders. Estes dois últimos infelizmente não estão ativos no momento da escrita deste post.','_Artigo publicado originalmente no [medium](https://medium.com/@juliobitencourt/an%C3%A1lise-sobre-os-podcasts-de-tecnologia-que-estou-ouvindo-atualmente-12b98b8574f4)_\n\nComecei a ouvir podcasts há bastante tempo. Comecei pelo Fala Freela, passando pelo Grok Podcast e ZOFE — Zone of Front Enders. Estes dois últimos infelizmente não estão ativos no momento da escrita deste post.\n\nPara mim, podcasts são ótimos pois posso consumir de forma passiva.\n\nDiferente de vídeos e textos, posso ouvir um podcast enquanto me exercito ou executo tarefas domésticas. Mas no meu caso, não consigo ouvir durante o trabalho ou durante tarefas que exigem habilidades cognitivas.\n\nSem mais delongas, vamos à lista dos podcasts que estou acompanhando nos últimos meses.\n\n### Podcasts em português\n[**Hipsters Ponto Tech**\n*Discussões acaloradas sobre startups, programação, ux, gadgets e as últimas tendências em tecnologia.*hipsters.tech](http://hipsters.tech/)\n\nO **Hipsters Ponto Tech** para mim é um dos melhores podcasts de tecnologia brasileiro da atualidade, sempre acertando na escolha dos temas e dos convidados.\n\nMas o ponto forte para mim está na condução das conversas pelo host [Paulo Silveira](https://twitter.com/paulo_caelum), que sempre tenta apresentar os conteúdos com a visão de um usuário leigo, tornando o podcast muito amigável para iniciantes.\n[**DEVNAESTRADA**\n*Podcast sobre front-end, back-end e desenvolvimento web. Toda sexta feira um novo episódio, com pautas, entrevistas e…*devnaestrada.com.br](http://devnaestrada.com.br/)\n\nJá conheço o **DEVNAESTRADA** faz um tempo, mas comecei a ouvir pra valer recentemente.\n\nA evolução na edição e na condução pelos hosts é bem nítida entre os primeiros episódios e os mais atuais.\n\nTemas e convidados muito bem escolhidos!\n\n### Podcasts em inglês\n[**Full Stack Radio**\n*A podcast for developers interested in building great software products. Every episode, Adam Wathan is joined by a…*www.fullstackradio.com](http://www.fullstackradio.com/)\n\nComo o nome mostra, o Full Stack Radio é ideal para desenvolvedores que querem conhecer detalhes das tecnologias mais utilizadas para criação de software.\n\nO Adam Wathan é um ótimo host, além de ser extremamente ativo na comunidade Laravel, framework PHP que utilizo na maioria dos meus projetos atuais.\n[**REWORK - A podcast by Basecamp**\n*Rework is a podcast by the makers of Basecamp about a better way to work and run your business. While the prevailing…*rework.fm](https://rework.fm/)\n\nPodcast novo do pessoal do Basecamp (antiga 37 signals). Confesso que ainda estou tentando me adaptar ao ritmo deste podcast.\n[**CodePen Radio - CodePen Blog**\n*Show Description We\'ve got Dan from Roost - a web notification service that helps businesses send better notifications…*blog.codepen.io](https://blog.codepen.io/radio/)\n\nPodcast sensacional do pessoal da **CodePen** narrando o dia a dia da startup.\n\nMuito útil para *founders* ou para quem trabalha ou quer trabalhar em uma startup.\n\nPara founders também sugiro o [http://likeaboss.com.br/](http://likeaboss.com.br/) que também é conduzido pelo Paulo, da Calum/Alura/Hipsters.tech. Mas dessa vez em conjunto com o Rodrigo, fundador da Vindi.\n\n### Bônus Tracks ?\n[**The Laracasts Snippet**\n*The Laracasts snippet, each episode, offers a single thought on some aspect of web development. Nothing more, nothing…*laracasts.simplecast.fm](https://laracasts.simplecast.fm/)\n\nO Jeffrey Way é o criador do laracasts.com, um site com centenas de tutoriais em vídeo sobre desenvolvimento web. Ou como dizem por lá \"It’s Kinda Like Netflix for Your Career!\".\n\nEle também tem um podcast chamado Laracasts Snippet com pequenos episódios que poderão te ajudar a elevar suas *soft skills*.\n\n### Conclusão\n\nComo vocês podem observar, a lista é pequena, mas pode gerar até umas 5 horas semanais de conteúdo para ouvir. É bastante coisa.\n\nProcuro ouvir podcasts mais generalistas, já que no meu cargo de CTO de startup, preciso acompanhar várias tecnologias ao mesmo tempo. Já falei mais sobre este assunto [neste artigo](https://medium.com/@juliobitencourt/como-mudei-minha-carreira-parte-ii-organizando-o-projeto-e-gerenciando-uma-equipe-de-470365572331).\n\nE você? Tem algum podcast legal para me indicar? Deixe uma resposta ou me chama no [Twitter](http://twitter.com/juliobitencourt). Aliás eu estou sempre colocando conteúdos legais por lá :)\n\nObrigado pela leitura. Não se esqueça de curtir e compartilhar!\n','2020-03-10 14:13:56','2020-04-21 18:06:25'),(16,'2020-03-10 14:18:14','pt-BR','como-lidar-com-o-excesso-de-informacao','Como lidar com o excesso de informação?','Em 1996 eu estava na oitava série e durante a aula de matemática o professor se dirigiu a classe e fez a seguinte pergunta: na opinião de vocês, qual é o bem mais valioso do mundo hoje?','_Artigo publicado originalmente no [medium](https://medium.com/@juliobitencourt/como-lidar-com-o-excesso-de-informa%C3%A7%C3%A3o-7ed497ff6221)_\n\nEm 1996 eu estava na oitava série e durante a aula de matemática o professor se dirigiu a classe e fez a seguinte pergunta:\n> # *na opinião de vocês, qual é o bem mais valioso do mundo hoje?*\n\nForam várias respostas — Petróleo, ouro, água, dinheiro, etc. — e eu nem lembro qual foi a minha.\n\nEnquanto os alunos respondiam, o professor começou a escrever em letras garrafais no quadro: INFORMAÇÃO.\n\nSegundo ele, este era o bem mais valioso do mundo em 1996.\n\nAlguns alunos ficaram espantados, outros ficaram indiferentes. Eu lembro de ter estranhado bastante o fato de um bem abstrato como a informação ser considerado o mais valioso do mundo pelo meu professor.\n\nPensei nos jornais, revistas, TV e rádio. E mesmo vendo que as empresas de comunicação tinham um valor enorme, achar que a informação era o bem mais valioso do mundo não fazia muito sentido.\n\nAté que…\n\n## A rede mundial de computadores. Ou internet, para os íntimos\n\nEm 1996, cerca de 1 milhão de brasileiros (40 milhões no mundo) tinham acesso a internet. E eu não era um deles.\n\nNaquele ano eu tive o primeiro contato com um PC, e dois anos depois o primeiro contato com a internet.\n\nUma das formas de apresentação desta nova tecnologia hoje seria mais do que clichê, “permitiria o acesso aos acervos de muitas bibliotecas do mundo todo diretamente do meu quarto”.\n\n<center><iframe width=\"100%\" src=\"https://www.youtube.com/embed/AJr0No21Ibk\" frameborder=\"0\" allowfullscreen></iframe></center>\n\nNa hora eu lembrei daquela aula em 1996, e que eu poderia ficar um pouco mais rico agora que quantidades consideráveis de informação estariam ao alcance de alguns cliques.\n\nÉ muito difícil se afastar da avalanche de conteúdo que cai diariamente sobre nossas cabeças, já que este hábito é cultural e visto de forma positiva pela sociedade.\n\nA realidade é que informação em quantidades que não conseguimos processar — ou ao menos entender — é só ruído.\n\nAlém disso, excesso de informação, trabalho multitarefa, stress e fadiga mental afetam diretamente o *hippocampus* e nossa capacidade de tomar decisões e fazer inferências.\n\nEsta avalanche de informação digital chegou rápido, ainda em 2001, o excesso de informação já era apontado como o [mal do século](http://www1.folha.uol.com.br/folha/dimenstein/imprescindivel/semana/gd020901a090901.htm).\n\nAinda vale destacar que no início dos anos 2000 não tínhamos a velocidade de conexão que temos hoje, as redes sociais e principalmente os smartphones.\n> *O mal-estar de nosso tempo é a inadequação, o sentimento opressivo de que as outras pessoas estão fazendo as coisas certas, lendo os livros que contam e usando os computadores e programas mais modernos enquanto nós estamos ficando para trás na carreira ou nos relacionamentos\n **Wayne Luke***\n\nJá que o acesso à informação deixou de ser um problema, o que temos que resolver hoje é que informação se transformou em uma *commodity*.\n\nEm que devemos focar então? É claro que o acesso à todo tipo de fonte de informações sobre um determinado assunto pode ser extremamente útil em nossa vida cotidiana.\n\nMas, o consumo de informação em excesso [pode viciar](https://www.elementsbehavioralhealth.com/culture-media/addicted-to-information/) e ter efeitos cognitivos prejudiciais.\n\n![](https://cdn-images-1.medium.com/max/2800/1*BohFSYzK0QWQ6b5JMF5xEw.jpeg)\n\n## Não fique de fora! Entendendo o FOMO\n\nCuriosamente, no mesmo ano em que meu professor abria os olhos da *tchurma* para o valor da informação, o estrategista de marketing Dr. Dan Herman, começou a estudar um fenômeno inusitado.\n\nVocê já reparou que alguns festivais de música tem ingressos esgotados mesmo antes do line up ser divulgado?\n\nEste não é um comportamento apenas da cultura pop. Até nos eventos de tecnologia mais hipster isto pode acontecer.\n\nÉ o famoso **FOMO**, ou **Fear Of Missing Out**.\n\nNo ano 2000, Herman publicou um *paper* sobre o tema, mas o termo FOMO ficou popular mesmo a partir de 2004 quando foi publicado em uma revista na escola de negócios de Harvard pelo autor Patrick J. McGinnis.\n> *O medo de perder, ou FOMO, é “uma percepção generalizada de que os outros possam estar tendo experiências gratificantes das quais se está ausente”. Essa ansiedade social é caracterizada pelo “desejo de permanecer continuamente conectado com o que os outros estão fazendo” [fonte](https://en.wikipedia.org/wiki/Fear_of_missing_out)*\n\nFazendo um paralelo ao consumo de informação, podemos entender como o **FOMO** pode ser nocivo e acabar nos colocando num looping — ou scroll — infinito em feeds e mais feeds.\n> # *Uma dica para combater o FOMO: termine de ler este texto antes de clicar nos links do mesmo.*\n\n## Tome cuidado com os gatilhos mentais\n\nVocê já se pegou em situações onde um artigo pareceu familiar mas mesmo assim você abriu uma nova aba e o deixou lá para ler depois?\n\nSomos atraídos por informação nova, fresquinha, mesmo sendo sobre assuntos que já estamos familiarizados. E a internet é cheia de nova informação, o tempo todo, 24×7.\n\nO ícone de notificações das redes sociais atrai o ponteiro do seu mouse com velocidade e precisão de raio laser, como se tivesse vida própria. E na verdade é quase isso.\n\nEmpresas de mídia e que desenvolvem aplicativos gastam muito tempo e dinheiro estudando o comportamento humano e até psicólogos estão envolvidos nesses estudos.\n\nSomos treinados para ficar constantemente ativos nos aplicativos e redes sociais, pois o engajamento nesses aplicativos é vendido pelas empresas aos anunciantes ou outros parceiros na forma de dados extremamente segmentados sobre suas preferências.\n\nÉ importante destacar que esse comportamento é natural do ser humano, e você provavelmente vai perder caso tente ignorar a bolinha vermelha no canto direito da rede social azul.\n\n## Então o que devemos fazer para nos livrarmos do excesso de informação?\n\nNada. Não podemos nos livrar e algo que não está no nosso controle.\n\nA primeira coisa que você precisa fazer é definir objetivos. Você precisa de metas, propósitos, gols…\n\nA partir daí, a informação que você consumir deve ser voltada aos objetivos definidos, mesmo que seu objetivo seja apenas se divertir ou se distrair.\n\nLembra que eu citei que informação demais é apenas ruído? Então, devemos separar o joio do trigo, o sinal do ruído.\n\nDê preferência aos artigos com opiniões e estudos atemporais. Deixe os tutoriais, how-tos e vídeo-aulas para as horas em que você vai realmente por a mão na massa.\n\n## Organizando suas leituras\n\nEu utilizo o [pocket](http://getpocket.com/) para duas tarefas específicas: a) armazenar artigos que embora sejam interessantes, eu não tenho tempo de ler naquele momento ou estão fora do meu foco atual ou b) artigos bons em sites com design ruim ou cheios de anúncios. Esta é inusitada, mas ao colocar no pocket, o app extrai o texto do artigo e apresenta em uma interface muito bonita e limpa; ótima para leitura.\n\n## Redes sociais\n\nComo dito acima, redes sociais são desenhadas para sugar sua atenção e seu tempo. E esta é a maior armadilha.\n\nControle o tempo que você gasta nas redes sociais com aplicativos como o **Rescue Me** ou extensões de navegador como a [Kill News Feed](https://chrome.google.com/webstore/detail/kill-news-feed/hjobfcedfgohjkaieocljfcppjbkglfd) e a [StayFocusd](https://chrome.google.com/webstore/detail/kill-news-feed/hjobfcedfgohjkaieocljfcppjbkglfd)\n\n## E-mail\n\nEnquanto o tempo passa, vamos nos cadastrando em dezenas de sites, baixamos conteúdo, compramos on line, e conhecemos novas pessoas.\n\nSua caixa de entrada pode virar um caos, e para se livrar desse caos você deve usar a tecnologia ao seu favor.\n\nDica: você pode utilizar o serviço unroll.me para cancelar o cadastro em newsletters indesejadas.\n\n## Limpeza periódica\n\nDe tempos em tempos, faça uma revisão em suas fontes de informação, sejam elas blogs, canais, perfis em redes sociais ou assinaturas de e-email.\n\nO conteúdo ainda faz sentido para você? Quantos posts de fulano eu parei para ler no último semestre?\n\nUma limpeza periódica te dará clareza mental sobre suas fontes de informação.\n\n## Conclusão: relaxe!\n\nEu percebi depois de vários anos que não adianta tentar segurar uma cachoeira com as mãos, nem mesmo com um guarda chuva.\n\nAs vezes é melhor fechar a janela e se permitir deixar passar. Como em uma relaxante viagem de trem.','2020-03-10 14:18:14','2020-04-21 18:06:25'),(17,'2020-03-18 20:49:03','pt-BR','integracao-continua-com-laravel-e-bitbucket-pipelines','Integração Contínua com Laravel e Bitbucket Pipelines','Trabalhe de forma mais efetiva e com menos erros através da Integração Contínua. Neste tutorial veremos como implementar CI com Laravel e Bitbucket Pipelines','Integração contínua é uma prática muito difundida na indústria de desenvolvimento de software.\n\nE hoje você vai aprender uma forma de fazer a **integração contínua em projetos Laravel** com o Bitbucket Pipelines.\n\nO Bitbucket Pipelines é a ferramenta de integração e deployment contínuo da plataforma cloud de Git Bitbucket.\n\nNo plano gratuito da ferramenta você conta com 50 minutos de build, que é o tempo gasto para execução dos processos de integração contínua. Ou seja, você pode começar a usar esta ferramenta muito útil agora mesmo.\n\nPara executar este tutorial você vai precisar do entendimento básico de:\n\n- Git\n- Terminal (Linux, Windows ou Mac)\n- Laravel\n\n## Então vamos ver como fazer a integração contínua com Laravel\n\nApós criar uma conta no Bitbucket, crie um novo repositório. Para este tutorial vamos chamá-lo de **laravel-pipeline**.\n\n<div class=\"mx-auto w-6/12 border-solid border-2 border-gray-600\"><img alt=\"Menu Bitbucket\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/1-bitbucket-menu.png\" /></div>\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Novo Repositório\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/2-create-new-repository.png\" /></div>\n\nApós a criação do repositório no bitbucket faça o clone em seu ambiente de desenvolvimento.\n\n<pre><code class=\"shell text-sm\">$ git clone git@bitbucket.org:seu-usuario-no-bitbucket/laravel-pipeline.git\n</code></pre>\n\nAcesse a pasta do repositório, adicione o remote e envie a branch master para o Bitbucket.\n\n<pre><code class=\"shell text-sm\">$ cd laravel-pipeline\n$ git remote add origin git@bitbucket.org:seu-usuario-no-bitbucket/laravel-pipeline.git\n$ git push -u origin master\n</code></pre>\n\n## Instalando o Laravel - Neste tutorial estamos usando a versão 7.x\n\nO Laravel pode ser instalado de [duas formas](https://laravel.com/docs/7.x#installing-laravel). Vamos usar a instalação via Laravel Installer.\n\nAinda na pasta laravel-pipeline digite.\n\n<pre><code class=\"shell text-sm\">$ laravel new</code></pre>\n\nApós a instalação do Laravel execute os testes automatizados que estão inclusos na instalação padrão.\n\nPara isto basta digitar no terminal:\n\n<pre><code class=\"shell text-sm\">$ artisan test</code></pre>\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Artisan Test\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/3-artisan-test.png\"/></div>\n\nAgora vamos fazer um commit inicial e enviar o código para o repositório no Bitbucket\n\n<pre><code class=\"shell text-sm\">$ git add .\n$ git commit -m \"Instalando o Laravel\"\n$ git push</code></pre>\n\nPronto. Nosso código já está no Bitbucket e agora podemos começar a configurar o pipeline.\n\n## Configurando o repositório para integração contínua no Bitbucket Pipelines\n\nAcesse as configurações do repositório e depois as configurações do Pipeline.\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Pipelines Settings\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/4-pipelines-settings.png\"/></div>\n\nEm seguida ative o Pipeline.\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Habilitando Pipelines Settings\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/5-enabling-pipelines-settings.png\"/></div>\n\nPerceba na imagem acima que agora precisamos configurar o arquivo **bitbucket-pipelines.yml**\n\n## Arquivos de configuração do Bitbucket Pipelines\n\nPrecisamos configurar dois arquivos no Bitbucket: o **bitbucket-pipelines.yml** e o **.env.pipelines**.\n\n### O arquivo bitbucket-pipelines.yml\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Templates\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/6-language-templates.png\"/></div>\n\nO Bitbucket provê vários templates de configuração para os mais diversos ambientes de desenvolvimento.\n\nVocê pode consultar as várias opções para entender como funcionam. Mas neste tutorial vamos criar o arquivo manualmente para praticarmos bem.\n\nNo seu editor preferido crie o arquivo **bitbucket-pipelines.yml** na raiz do projeto ou seja, na pasta **laravel-pipeline**.\n\nO bitbucket-pipelines.yml, como a extensão já mostra, é um [arquivo YAML](https://yaml.org/). Você não precisa de muita experiência neste tipo de arquivo neste momento pois ele é bem simples de entender.\n\n<pre><code class=\"yaml text-sm\">image: php:7.4-fpm\n\npipelines:\n  default:\n    - step:\n        name: Build and test\n        caches:\n          - composer\n        script:\n          - apt-get update && apt-get install -qy git curl libmcrypt-dev mariadb-client ghostscript\n          - yes | pecl install mcrypt-1.0.3\n          - docker-php-ext-install pdo_mysql bcmath exif\n          - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n          - composer install\n          - ln -f -s .env.pipelines .env\n          - php artisan migrate\n          - ./vendor/bin/phpunit\n        services:\n          - mysql\n          - redis\ndefinitions:\n  services:\n    mysql:\n      image: mysql:5.7\n      environment:\n        MYSQL_DATABASE: \'laravel-pipeline\'\n        MYSQL_RANDOM_ROOT_PASSWORD: \'yes\'\n        MYSQL_USER: \'homestead\'\n        MYSQL_PASSWORD: \'secret\'\n    redis:\n      image: redis</code></pre>\n\n### Entendendo o arquivo bitbucket-pipelines.yml\n\nO Bitbucket Pipelines utiliza **containers Docker** para executar as etapas. O arquivo bitbucket-pipelines.yml é o principal arquivo de configuração deste fluxo automatizado.\n\nJá na primeira linha do arquivo vemos que vamos utilizar uma **imagem docker para PHP 7.4 com o PHP-FPM configurado**.\n\n<pre><code class=\"yaml text-sm\">image: php:7.4-fpm</code></pre>\n\nEm nosso arquivo de exemplo temos duas seções principais: **pipelines** e **definitions**. Vamos começar pela **pipelines**.\n\nEsta seção define quais pipelines estão definidos para este repositório. O **default** será executado para todos os branchs.\n\nCada **- step** é um passo isolado no fluxo. Os passos podem trocar _estado_ entre si, mas esta configuração está fora do escopo neste tutorial.\n\nNo step definimos: **name, caches, script e services**.\n\n- **name** - é o nome que será exibido na interface de execução do pipeline.\n- **caches** - configuramos o cache do composer para que as execuções seguintes do pipeline sejam mais rápidas\n- **scripts** - é onde a mágica acontece. Vou explicar melhor adiante. \n- **services** - são os serviços necessários para a utilização do pipeline. Neste caso o MySQL e o Redis. Os services serão explicados adiante neste tutorial.\n\nLembrando que esta é uma configuração básica e é possível fazer muito mais com o Bitbucket Pipelines. Inclusive deployment automático, como veremos em um arquivo futuro.\n\nSugiro que consultem a documentação no site oficial.\n\n### Executando os scripts no container Docker\n\nPrimeiro atualizamos os pacotes da imagem Docker e instalamos alguns os pacotes **git, curl, libmcrypt-dev, mariadb-client, ghostscript e mcrypt**\n\n<pre><code class=\"yaml text-sm\">- apt-get update && apt-get install -qy git curl libmcrypt-dev mariadb-client ghostscript\n- yes | pecl install mcrypt-1.0.3</code></pre>\n\nAgora utilizamos a ferramenta **docker-php-ext-install** para instalar as extensões **pdo_mysql, bcmath e exif** que são necessárias para esta versão do Laravel.\n\n<pre><code class=\"yaml text-sm\">- docker-php-ext-install pdo_mysql bcmath exif</code></pre>\n\nEm seguida utilizamos o **curl** para baixar o composer e instalamos as dependências do nosso projeto Laravel com o comando **composer install**\n\n<pre><code class=\"yaml text-sm\">- curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n- composer install</code></pre>\n\nE por último mas não menos importante, criamos um link simbólico entre o .env.pipelines e o .env padrão que será utilizado pelo Laravel durante a execução dos testes automatizados.\n\nDepois rodamos as migrações e a suíte de testes.\n\n<pre><code class=\"yaml text-sm\">- ln -f -s .env.pipelines .env\n- php artisan migrate\n- ./vendor/bin/phpunit</code></pre>\n\n### Definindo os serviços que serão instalados através de containers Docker\n\n<pre><code class=\"yaml text-sm\">definitions:\n  services:\n    mysql:\n      image: mysql:5.7\n      environment:\n        MYSQL_DATABASE: \'laravel-pipeline\'\n        MYSQL_RANDOM_ROOT_PASSWORD: \'yes\'\n        MYSQL_USER: \'homestead\'\n        MYSQL_PASSWORD: \'secret\'\n    redis:\n      image: redis</code></pre>\n\n\nCom o arquivo bitbucket-pipelines.yml configurado só falta agora configurar um arquivo acessório com as variáveis de ambiente que serão utilizadas pelo serviço durante a execução dos passos\n\n### O arquivo .env.pipelines\n\n<pre><code class=\"env\">APP_ENV=local\nAPP_KEY=ThisIsThe32CharacterKeySecureKey\nAPP_DEBUG=true\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_DATABASE=laravel-pipeline\nDB_USERNAME=homestead\nDB_PASSWORD=secret</code></pre>\n\nEste arquivo define as variáveis de ambiente que serão utilizadas especificamente para a execução do pipeline.\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Git Status\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/7-git-status.png\"/></div>\n\n<pre><code class=\"shell text-sm\">$ git add .\n$ git commit -m \"Configurando o Bitbucket Pipelines\"\n$ git push</code></pre>\n\nA partir do momento em que o código é enviado para o repositório o Bitbucket Pipelines vai identificar esta ação e iniciar o processo de build.\n\nAo acessar o menu Pipelines você verá que o pipeline está sendo executado para o commit que criamos anteriormente. Neste caso o \"Configurando o Bitbucket Pipelines\".\n\n<div class=\"mx-auto w-5/12 border-solid border-2 border-gray-600\"><img alt=\"Menu Pipelines\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/8-pipelines-menu.png\"/></div>\n\n<div class=\"mx-auto w-full border-solid border-2 border-gray-600\"><img alt=\"Pipelines Screen\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/9-pipelines-screen.png\"/></div>\n\nClique no status do pipeline e você verá a tela com todos os passos sendo executados.\n\n<div class=\"mx-auto w-7/12 border-solid border-2 border-gray-600\"><img alt=\"Menu Pipelines\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/bitbucket-pipelines-running.gif\"/></div>\n\nSe tudo deu certo, a build vai ficar na cor verde\n\n<div class=\"mx-auto w-6/12 border-solid border-2 border-gray-600\"><img alt=\"Build com sucesso\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/10-build-successful.png\"/></div>\n\n<div class=\"mx-auto w-full border-solid border-2 border-gray-600\"><img alt=\"Tela dos Pipelines\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/11-pipelines-screen.png\"/></div>\n\n## Agora que tal inserir um erro em nosso código e envia-lo para o repositório?\n\nVamos forçar um erro em nosso teste automatizado.\n\nAbra o arquivo ExampleTest.php localizado no diretório tests/Unit e altere a linha 16 conforme abaixo.\n\n<pre><code class=\"php text-sm\">$this->assertTrue(false);</code></pre>\n\nAgora faça o commit e envie para o repositório.\n\n<pre><code class=\"shell text-sm\">$ git add .\n$ git commit -m \"Minha funcionalidade incrível\"\n$ git push</code></pre>\n\nApós alguns instantes o pipeline será executado automaticamente e ao executar a suíte de testes vai falhar.\n\n<div class=\"mx-auto w-6/12 border-solid border-2 border-gray-600\"><img alt=\"Build falha\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/12-build-failed.png\" /></div>\n\nConfira a saída do PHP Unit.\n\n<div class=\"mx-auto w-10/12 border-solid border-2 border-gray-600\"><img alt=\"Build falha\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/13-build-failed-phpunit.png\" /></div>\n\n## Conclusão\n\nNeste artigo vimos que com um pouco de configuração inicial poderemos poupar um tempo enorme em localização e correção de erros no futuro.\n\nSe você encontrou algum problema ou tem alguma sugestão por favor deixe um comentário e se possível compartilhe este artigo com seus amigos e amigas devs!\n\n','2020-03-18 20:49:03','2020-04-21 18:06:25'),(18,'2020-05-19 13:27:54','pt-BR','como-criar-um-pull-request-perfeito','Como criar um Pull Request perfeito','Escrever um bom pull request pode aumentar muito a produtividade do seu time. Descubra como criar o pull request perfeito neste artigo!','Grande parte do tempo em que trabalhamos de forma colaborativa estamos na verdade gastando nosso tempo com comunicação. Seja via chat, e-mail, telefone ou as famigeradas reuniões.\n\nSe você já leu o [manifesto ágil](https://agilemanifesto.org/iso/ptbr/manifesto.html) deve se lembrar:\n\n> Indivíduos e interações mais que processos e ferramentas\n\nE ao contrário do que é dito popular: você é responsável pelo diz e de forma direta ou indireta; pelo que a outra parte entende.\n\nUm **pull request** (ou merge request se você usa Gitlab) nada mais é do que uma declaração, uma mensagem ao seu time de que você terminou uma etapa do trabalho e precisa levar este trabalho adiante.\n\nOu seja: **comunicação**.\n\n>Code Review is the practice of having other peers reviewing source code changes before it gets introduced into a baseline. Developers usually review their team members\' code, although there are companies that promote cross-team reviews.\n\n<span class=\"text-sm text-center\">[https://sourcelevel.io/everything-about-code-review-from-peer-review-to-automated-code-review](https://sourcelevel.io/everything-about-code-review-from-peer-review-to-automated-code-review)</span>\n\nEsta é a importância de um pull request bem feito.\n\nNeste artigo veremos algumas dicas para criar pull requests que sejam realmente revisados e cumpram seu papel de gerar valor ao negócio; com código conciso, legível e testável.\n\n## Como escrever uma boa mensagem de commit?\n\nA importância da comunicação eficiente que caracteriza um bom pull request começa antes da criação do mesmo no Github, Gitlab, Bitbucket e similares.\n\nÉ imprescindível que você escreva boas mensagens nos seus commits. Elas devem especificar exatamente o que foi feito e qual problema foi resolvido.\n\nNovamente a dica óbvia dada acima: escreva bons commits. Não seja aquela pessoa que gera um commit com uma mensagem \"WIP\" e envia para o repositório remoto. Você não faz isso né? :P\n\n### Ensinar Git está fora do contexto deste artigo. Mas seguem algumas dicas\n\n*   Evite o **git add -a**. Adicione apenas os arquivos que foram criados/alterados para aquela funcionalidade específica\n*   Faça commits pequenos\n*   Revise as mensagens antes de fazer o _push_, ou seja, enviar a branch para o repositório remoto\n*   Se necessário reescreva as mensagens. Para isto use comandos como **git rebase -i** e **amend**.\n*   Aprenda a usar o **git squash** e agrupe commits que se encaixem em um mesmo contexto ou tenham sido alterações repetitivas em um mesmo trecho de código\n\nSe você é um líder técnico combine as regras com o seu time, documente estas regras em um _guideline_ e o mais importante: **recuse pull requests que não as sigam.**\n\n## Explique o propósito do pull request através do contexto de negócio\n\nAgora se coloque no lugar daqueles que receberão a nobre tarefa de revisar o seu código. Tenha em mente que estas pessoas poderão estar em um contexto totalmente diferente daquele no qual você está quando abrir o pull request. Isto pode acontecer mesmo que os revisores e as revisoras estejam no mesmo projeto e no mesmo time.\n\nComo mencionei acima, é importante se colocar no lugar das pessoas. Indo além, se coloque no lugar do seu \"eu\" do futuro e se pergunte se a descrição do pull request é clara o suficiente para que você a entenda 6 meses depois.\n\nExplique o contexto de negócio do pull request. Como o problema foi identificado? Qual é o objetivo da funcionalidade?\n\nForneça informações claras sobre como o revisor pode reproduzir o erro ou testar o código que está sendo revisado e principalmente qual é o resultado esperado e como isto pode gerar valor ao negócio.\n\n## Diminua o tamanho do pull request\n\nO pull request perfeito deve ser pequeno. Se a funcionalidade que está sendo desenvolvida é muito grande ou complexa você poderá centralizar o trabalho em uma feature branch - a depender do fluxo de trabalho do time.\n\nLembre-se do SRP, ou Single Responsibility Principle e a assim como nos commits, faça pull requests pequenos.\n\n## 5 formas de escrever títulos matadores. A última vai te surpreender!\n\nViram o bait?\n\nBrincadeiras a parte. Escreva bons e - de preferência - pequenos títulos para seus pull requests.\n\n### Algumas dicas\n\n*   Descreva o que foi feito ao invés de como foi feito. A descrição do pull request e o próprio código devem mostrar o _como_\n*   Utilize sempre o mesmo _tom_ e tempo verbal\n*   Faça uma conexão entre o título do pull request e o contexto de negócio\n\n## A descrição do pull request perfeito\n\nComece mostrando o contexto do problema/user story que está sendo implementado naquele pull request.\n\n*   Utilize checklists e elementos visuais como captura de tela, gifs, snippets de código, etc.\n*   Justifique pontos que possam ser controversos e polêmicos.\n*   Não quebre janelas. Se o PR introduzir algum débito técnico demonstre o caso e se possível como este débito será pago no futuro\n\n## Automatize tarefas repetitivas\n\nAs melhores plataformas do mercado contam com muitas ferramentas de verificação de status, tarefas pendentes e execução correta do pipeline de testes.\n\nVocê pode [habilitar verificações de status obrigatórias](https://help.github.com/pt/github/administering-a-repository/enabling-required-status-checks) ou configurar [merge checks](https://confluence.atlassian.com/bitbucketserver/checks-for-merging-pull-requests-776640039.html) no Bitbucket.\n\nDesta forma, uma camada de verificações de integridade será executada automaticamente durante o ciclo de vida do pull request.\n\n### Code Review - Pull request aberto? É hora da revisão\n\nE atenção! Se liga aí, que é hora da revisão! (os xóvens provavelmente não [pegaram a referência](https://www.youtube.com/watch?v=lqikvAgyFzE))\n\nComo na vida, prevenir é melhor que remediar. O custo de descobrir bugs tarde é [muito grande](https://deepsource.io/blog/exponential-cost-of-fixing-bugs/).\n\n### Pontos que devem ser observados com bastante atenção em um pull request\n\n*   O código funciona. Este é óbvio, mas já vi muito pull request ser aprovado sem funcionar\n*   Os testes estão bem escritos e descrevem claramente o que está sendo testado\n*   O design e arquitetura estão bem definidos e em conformidade com as melhores práticas\n*   Os guidelines estão sendo seguidos\n*   O pull request pode introduzir alguma vulnerabilidade de segurança no código ou através de dependências?\n*   A performance do software pode sofrer alguma queda\n\n### Algumas dicas para os revisores\n\n*   Escreva comentários tanto na descrição geral do pull request\n*   Crie checklists caso encontre múltiplos pontos de melhoria ou esclarecimentos\n*   Bom humor é bem vindo! Mas não utilize tom agressivo ou de deboche\n\n### Conclusão\n\nEscrever o pull request perfeito pode ser um pouco trabalhoso no começo. Mas assim como em testes automatizados o investimento se paga no longo prazo! Pode confiar!\n\n#### Referências\n\n*   **[https://opensource.com/article/18/6/anatomy-perfect-pull-request](https://opensource.com/article/18/6/anatomy-perfect-pull-request)**\n*   **[https://www.atlassian.com/blog/git/written-unwritten-guide-pull-requests](https://www.atlassian.com/blog/git/written-unwritten-guide-pull-requests)**\n*   **[https://buttercms.com/blog/5-things-your-team-should-do-to-make-pull-requests-less-painful](https://buttercms.com/blog/5-things-your-team-should-do-to-make-pull-requests-less-painful)**\n*   **[https://azevedorafaela.com/2018/04/27/what-is-the-cost-of-a-bug/](https://azevedorafaela.com/2018/04/27/what-is-the-cost-of-a-bug/)**\n*   **[https://deepsource.io/blog/exponential-cost-of-fixing-bugs/](https://deepsource.io/blog/exponential-cost-of-fixing-bugs/)**','2020-05-19 13:27:54',NULL),(19,'2020-05-19 13:18:23','en','continuous-integration-with-laravel-bitbucket-pipelines','Continuous Integration with Laravel and Bitbucket Pipelines','Work in a more effective way with Continuous Integration. In this tutorial we\'ll cover CI with Laravel and Bitbucket Pipelines','Continuous integration is a widespread practice in the software development industry.\n\nAnd today you will learn a way to do **continuous integration in Laravel projects** with Bitbucket Pipelines.\n\nBitbucket Pipelines is the tool for integration and continuous deployment of the Git Bitbucket cloud platform.\n\nIn the free plan of the tool you have 50 minutes of build, which is the time spent to execute the continuous integration processes. That is, you can start using this very useful tool right now.\n\nTo run this tutorial you will need a basic understanding of:\n\n- Git\n- Terminal (Linux, Windows or Mac)\n- Laravel\n\n## So let\'s see how to do continuous integration with Laravel\n\nAfter creating a Bitbucket account, create a new repository. For this tutorial we will call it **laravel-pipeline**.\n\n<div class=\"mx-auto w-6/12 border-solid border-2 border-gray-600\"><img alt=\"Bitbucket Menu\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/1-bitbucket-menu.png\" /></div>\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"New Repository\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/2-create-new-repository.png\" /></div>\n\nAfter creating the repository in bitbucket, clone it in your development environment.\n\n<pre><code class=\"shell text-sm\">$ git clone git@bitbucket.org:your-username/laravel-pipeline.git\n</code></pre>\n\nAccess the repository folder, add the remote and send the master branch to Bitbucket.\n\n<pre><code class=\"shell text-sm\">$ cd laravel-pipeline\n$ git remote add origin git@bitbucket.org:your-username/laravel-pipeline.git\n$ git push -u origin master\n</code></pre>\n\n## Installing Laravel - In this tutorial we are using version 7.x\n\nLaravel can be installed in [two ways] (https://laravel.com/docs/7.x#installing-laravel). We will use the installation via Laravel Installer.\n\nStill in the laravel-pipeline folder type.\n\n<pre><code class=\"shell text-sm\">$ laravel new</code></pre>\n\nAfter installing Laravel, run the automated tests that are included in the standard installation.\n\nTo do this, just type in the terminal:\n\n<pre><code class=\"shell text-sm\">$ artisan test</code></pre>\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Artisan Test\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/3-artisan-test.png\"/></div>\n\nNow let\'s do an initial commit and send the code to the repository on Bitbucket\n\n<pre><code class=\"shell text-sm\">$ git add .\n$ git commit -m \"Installing Laravel\"\n$ git push</code></pre>\n\nDone! Our code is already in Bitbucket and now we can start to configure the pipeline.\n\n## Configuring the repository for continuous integration in Bitbucket Pipelines\n\nAccess the repository settings and then the Pipeline settings.\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Pipelines Settings\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/4-pipelines-settings.png\"/></div>\n\nThen activate the Pipeline.\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Habilitando Pipelines Settings\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/5-enabling-pipelines-settings.png\"/></div>\n\nNotice in the image above that now we need to configure the file **bitbucket-pipelines.yml**\n\n## Bitbucket Pipelines configuration files\n\nWe need to configure two files in Bitbucket: **bitbucket-pipelines.yml** and **.env.pipelines**.\n\n### The file bitbucket-pipelines.yml\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Templates\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/6-language-templates.png\"/></div>\n\nBitbucket provides several configuration templates for the most diverse development environments.\n\nYou can consult the various options to understand how they work. But in this tutorial we will create the file manually to practice well.\n\nIn your preferred editor create the file **bitbucket-pipelines.yml** at the root of the project, that is, in the folder **laravel-pipeline**.\n\nBitbucket-pipelines.yml, as the extension already shows, is a [YAML file] (https://yaml.org/). You don\'t need a lot of experience in this type of file right now as it is very simple to understand.\n\n<pre><code class=\"yaml text-sm\">image: php:7.4-fpm\n\npipelines:\n  default:\n    - step:\n        name: Build and test\n        caches:\n          - composer\n        script:\n          - apt-get update && apt-get install -qy git curl libmcrypt-dev mariadb-client ghostscript\n          - yes | pecl install mcrypt-1.0.3\n          - docker-php-ext-install pdo_mysql bcmath exif\n          - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n          - composer install\n          - ln -f -s .env.pipelines .env\n          - php artisan migrate\n          - ./vendor/bin/phpunit\n        services:\n          - mysql\n          - redis\ndefinitions:\n  services:\n    mysql:\n      image: mysql:5.7\n      environment:\n        MYSQL_DATABASE: \'laravel-pipeline\'\n        MYSQL_RANDOM_ROOT_PASSWORD: \'yes\'\n        MYSQL_USER: \'homestead\'\n        MYSQL_PASSWORD: \'secret\'\n    redis:\n      image: redis</code></pre>\n\n### Understanding the bitbucket-pipelines.yml file\n\nBitbucket Pipelines uses **Docker containers** to perform the steps. The bitbucket-pipelines.yml file is the main configuration file for this automated flow.\n\nIn the first line of the file we see that we will use a **docker image for PHP 7.4 with PHP-FPM configured**.\n\n<pre><code class=\"yaml text-sm\">image: php:7.4-fpm</code></pre>\n\nIn our example file we have two main sections: **pipelines** and **definitions**. Let\'s start with **pipelines**.\n\nThis section defines which pipelines are defined for this repository. **default** will be performed for all branches.\n\nEach **- step** is an isolated step in the flow. The steps can exchange _state_ with each other, but this configuration is out of scope in this tutorial.\n\nIn the step we define: **name, caches, script and services**.\n\n- **name** - is the name that will be displayed in the pipeline execution interface\n- **caches** - we configure the composer cache so that subsequent pipeline runs are faster\n- **scripts** - is where the magic happens. I will explain further below\n- **services** - are the services needed to use the pipeline. In this case MySQL and Redis. The services will be explained later in this tutorial\n\nRemembering that this is a basic configuration and it is possible to do much more with Bitbucket Pipelines. Including automatic deployment, as we will see in a future file.\n\nI suggest you consult the documentation on the official website.\n\n### Running the scripts in the Docker container\n\nFirst we update the Docker image packages and install the **git, curl, libmcrypt-dev, mariadb-client, ghostscript and mcrypt** packages\n\n<pre><code class=\"yaml text-sm\">- apt-get update && apt-get install -qy git curl libmcrypt-dev mariadb-client ghostscript\n- yes | pecl install mcrypt-1.0.3</code></pre>\n\nWe now use the **docker-php-ext-install** tool to install the **pdo_mysql, bcmath and exif** extensions that are required for this version of Laravel.\n\n<pre><code class=\"yaml text-sm\">- docker-php-ext-install pdo_mysql bcmath exif</code></pre>\n\nThen we use **curl** to download composer and install the dependencies of our Laravel project with the command **composer install**\n\n<pre><code class=\"yaml text-sm\">- curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\n- composer install</code></pre>\n\nAnd last but not least, we created a symbolic link between **.env.pipelines** and the standard **.env** that will be used by Laravel during the execution of automated tests.\n\nThen we ran the migrations and the test suite.\n\n<pre><code class=\"yaml text-sm\">- ln -f -s .env.pipelines .env\n- php artisan migrate\n- ./vendor/bin/phpunit</code></pre>\n\n### Defining the services to be installed through Docker containers\n\n<pre><code class=\"yaml text-sm\">definitions:\n  services:\n    mysql:\n      image: mysql:5.7\n      environment:\n        MYSQL_DATABASE: \'laravel-pipeline\'\n        MYSQL_RANDOM_ROOT_PASSWORD: \'yes\'\n        MYSQL_USER: \'homestead\'\n        MYSQL_PASSWORD: \'secret\'\n    redis:\n      image: redis</code></pre>\n\n\nWith the **bitbucket-pipelines.yml** file configured, all that remains now is to configure an accessory file with the environment variables that will be used by the service during the execution of the steps\n\n### The file .env.pipelines\n\n<pre><code class=\"env\">APP_ENV=local\nAPP_KEY=ThisIsThe32CharacterKeySecureKey\nAPP_DEBUG=true\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_DATABASE=laravel-pipeline\nDB_USERNAME=homestead\nDB_PASSWORD=secret</code></pre>\n\nThis file defines the environment variables that will be used specifically for the execution of the pipeline.\n\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Git Status\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/7-git-status.png\"/></div>\n\n<pre><code class=\"shell text-sm\">$ git add .\n$ git commit -m \"Configuring Bitbucket Pipelines\"\n$ git push</code></pre>\n\nFrom the moment the code is sent to the repository, Bitbucket Pipelines will identify this action and start the build process.\n\nWhen accessing the Pipelines menu you will see that the pipeline is being executed for the commit that we created earlier. In this case, \"Configuring Bitbucket Pipelines\".\n\n<div class=\"mx-auto w-5/12 border-solid border-2 border-gray-600\"><img alt=\"Menu Pipelines\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/8-pipelines-menu.png\"/></div>\n\n<div class=\"mx-auto w-full border-solid border-2 border-gray-600\"><img alt=\"Pipelines Screen\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/9-pipelines-screen.png\"/></div>\n\nClick on the pipeline status and you will see the screen with all the steps being performed.\n\n<div class=\"mx-auto w-7/12 border-solid border-2 border-gray-600\"><img alt=\"Menu Pipelines\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/bitbucket-pipelines-running.gif\"/></div>\n\nIf everything went well, the build will be green\n\n<div class=\"mx-auto w-6/12 border-solid border-2 border-gray-600\"><img alt=\"Build successfully\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/10-build-successful.png\"/></div>\n\n<div class=\"mx-auto w-full border-solid border-2 border-gray-600\"><img alt=\"Pipelines Screen\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/11-pipelines-screen.png\"/></div>\n\n## Now how about inserting an error in our code and sending it to the repository?\n\nLet\'s force an error in our automated test.\n\nOpen the ExampleTest.php file located in the tests / Unit directory and change line 16 as shown below.\n\n<pre><code class=\"php text-sm\">$this->assertTrue(false);</code></pre>\n\nNow commit and upload to the repository.\n\n<pre><code class=\"shell text-sm\">$ git add .\n$ git commit -m \"My amazing functionality\"\n$ git push</code></pre>\n\nAfter a few moments the pipeline will be executed automatically and when running the test suite it will fail.\n\n<div class=\"mx-auto w-6/12 border-solid border-2 border-gray-600\"><img alt=\"Build failed\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/12-build-failed.png\" /></div>\n\nCheck out the PHP Unit output.\n\n<div class=\"mx-auto w-10/12 border-solid border-2 border-gray-600\"><img alt=\"Build falha\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/13-build-failed-phpunit.png\" /></div>\n\n## Conclusion\n\nIn this article we saw that with a little initial setup we can save a lot of time in locating and correcting errors in the future.\n\nIf you encountered any problems or have any suggestions please leave a comment and if possible share this article with your devs friends!','2020-05-19 13:18:23',NULL),(20,NULL,NULL,'como-criar-um-servidor-php-com-nginx-na-aws','Como criar um servidor PHP com Nginx na AWS','Como criar um servidor PHP com Nginx na AWS','Você pode automatizar todo este processo com ferramentas como Ansible, Terraform ou similares, ou ainda, rodar todos esses serviços em containers Docker.\r\n\r\nMas eu acredito que criar esta configuração de forma manual é muito importante para que você saiba o que será automatizado.\r\n\r\n**1 - Criando uma nova instância na AWS**\r\n\r\nConta com 12 meses grátis. O Free tier\r\n\r\nCriar uma instância no serviço EC2 da AWS não é difícil.\r\n\r\nVamos escolher uma imagem dentre as várias disponíveis. Para este artigo usaremos a imagem Ubuntu 20.04 (Focal) LTS.\r\n\r\n<p id=\"gdcalert1\" ><span style=\"color: red; font-weight: bold\">>>>>>  gd2md-html alert: inline image link here (to images/image1.png). Store image on your image server and adjust path/filename/extension if necessary. </span><br>(<a href=\"#\">Back to top</a>)(<a href=\"#gdcalert2\">Next alert</a>)<br><span style=\"color: red; font-weight: bold\">>>>>> </span></p>\r\n\r\n![alt_text](images/image1.png \"image_tooltip\")\r\n\r\n\r\nEm seguida definimos o tipo da instância. No nosso caso usaremos uma instância elegível para utilização na camada gratuita.\r\n\r\n\r\n\r\n<p id=\"gdcalert2\" ><span style=\"color: red; font-weight: bold\">>>>>>  gd2md-html alert: inline image link here (to images/image2.png). Store image on your image server and adjust path/filename/extension if necessary. </span><br>(<a href=\"#\">Back to top</a>)(<a href=\"#gdcalert3\">Next alert</a>)<br><span style=\"color: red; font-weight: bold\">>>>>> </span></p>\r\n\r\n\r\n![alt_text](images/image2.png \"image_tooltip\")\r\n\r\n\r\nEsta configuração conta com 1GB de memória RAM, o que é suficiente para um servidor básico.\r\n\r\nNa configuração de grupos de segurança, criamos um novo grupo com acesso nas portas 80 para tráfego HTTP e 22 para acesso SSH a partir do seu computador local.\r\n\r\n\r\n\r\n<p id=\"gdcalert3\" ><span style=\"color: red; font-weight: bold\">>>>>>  gd2md-html alert: inline image link here (to images/image3.png). Store image on your image server and adjust path/filename/extension if necessary. </span><br>(<a href=\"#\">Back to top</a>)(<a href=\"#gdcalert4\">Next alert</a>)<br><span style=\"color: red; font-weight: bold\">>>>>> </span></p>\r\n\r\n\r\n![alt_text](images/image3.png \"image_tooltip\")\r\n\r\n\r\nPor último vamos criar ou selecionar um par de chaves. Este par de chaves funciona da seguinte forma: uma chave pública fica armazenada na AWS e uma chave privada fica armazenada no seu computador através de um arquivo com a extensão pem.\r\n\r\nEste passo é muito importante. Caso você perca o acesso à chave privada no seu computador o servidor poderá ficar inacessível. Veremos a frente como configurar o acesso ao servidor de uma forma mais adequada.\r\n\r\n\r\n\r\n<p id=\"gdcalert4\" ><span style=\"color: red; font-weight: bold\">>>>>>  gd2md-html alert: inline image link here (to images/image4.png). Store image on your image server and adjust path/filename/extension if necessary. </span><br>(<a href=\"#\">Back to top</a>)(<a href=\"#gdcalert5\">Next alert</a>)<br><span style=\"color: red; font-weight: bold\">>>>>> </span></p>\r\n\r\n\r\n![alt_text](images/image4.png \"image_tooltip\")\r\n\r\n\r\nClique em \"Lauch Instances\" a aguarde a criação da instância.\r\n\r\n2 - Acessando o servidor via SSH com a chave privada \\\r\n\r\n\r\nAcesse a lista de instâncias no painel da AWS e clique com o botão direito sobre a que foi criada no passo 1. Em seguida clique em Connect.\r\n\r\n\r\n\r\n<p id=\"gdcalert5\" ><span style=\"color: red; font-weight: bold\">>>>>>  gd2md-html alert: inline image link here (to images/image5.png). Store image on your image server and adjust path/filename/extension if necessary. </span><br>(<a href=\"#\">Back to top</a>)(<a href=\"#gdcalert6\">Next alert</a>)<br><span style=\"color: red; font-weight: bold\">>>>>> </span></p>\r\n\r\n\r\n![alt_text](images/image5.png \"image_tooltip\")\r\n\r\n\r\n \\\r\nAs instruções de conexão serão exibidas. Perceba que você precisará atribuir permissões específicas para a chave privada através do comando chmod mostrado abaixo.\r\n\r\n\r\n\r\n<p id=\"gdcalert6\" ><span style=\"color: red; font-weight: bold\">>>>>>  gd2md-html alert: inline image link here (to images/image6.png). Store image on your image server and adjust path/filename/extension if necessary. </span><br>(<a href=\"#\">Back to top</a>)(<a href=\"#gdcalert7\">Next alert</a>)<br><span style=\"color: red; font-weight: bold\">>>>>> </span></p>\r\n\r\n\r\n![alt_text](images/image6.png \"image_tooltip\")\r\n\r\n\r\nObs. Você deverá substituir o endereço do servidor pelo endereço que estiver sendo exibido no seu ambiente na AWS.\r\n\r\nAtribua as permissões corretas conforme instruções da AWS.\r\n\r\n$ chmod 400 SuaChave.pem\r\n\r\nApós atribuir a permissão correta, digite comando abaixo para se conectar ao servidor.\r\n\r\n$ ssh -i \"SuaChave.pem\" [ubuntu@ec2-X-XXX-XXX-XXX.compute-1.amazonaws.com](mailto:ubuntu@ec2-X-XXX-XXX-XXX.compute-1.amazonaws.com)\r\n\r\nSe tudo deu certo agora você está acessando o terminal da instância Ubuntu 20.04 na AWS.\r\n\r\nPara se certificar que está na versão correta digite\r\n\r\n$ **<code>cat /etc/os-release</code></strong>\r\n\r\nVocê deverá ver a seguinte saída no terminal.\r\n\r\n\r\n\r\n<p id=\"gdcalert7\" ><span style=\"color: red; font-weight: bold\">>>>>>  gd2md-html alert: inline image link here (to images/image7.png). Store image on your image server and adjust path/filename/extension if necessary. </span><br>(<a href=\"#\">Back to top</a>)(<a href=\"#gdcalert8\">Next alert</a>)<br><span style=\"color: red; font-weight: bold\">>>>>> </span></p>\r\n\r\n\r\n![alt_text](images/image7.png \"image_tooltip\")\r\n\r\n\r\n3 - Configurando um usuário administrador\r\n\r\nCriando o usuário\r\n\r\n$ sudo adduser nomedousuario\r\n\r\nAdding user `nomedousuario ...\r\n\r\nAdding new group `nomedousuario (1001) ...\r\n\r\nAdding new user `nomedousuario (1001) with group `nomedousuario ...\r\n\r\nCreating home directory `/home/nomedousuario ...\r\n\r\nCopying files from `/etc/skel\' ...\r\n\r\nNew password:\r\n\r\nRetype new password:\r\n\r\npasswd: password updated successfully\r\n\r\nChanging the user information for nomedousuario\r\n\r\nEnter the new value, or press ENTER for the default\r\n\r\n	Full Name []:\r\n\r\n	Room Number []:\r\n\r\n	Work Phone []:\r\n\r\n	Home Phone []:\r\n\r\n	Other []:\r\n\r\nIs the information correct? [Y/n] Y\r\n\r\nTroque o usuário para o que acabou de ser criado\r\n\r\n$ sudo su nomedousuario\r\n\r\n$ cd ~/\r\n\r\n$ pwd\r\n\r\nVeja a saída /home/nomedousuario\r\n\r\nConfigurando o acesso SSH para o novo usuário\r\n\r\nCrie um novo par de chaves no seu computador\r\n\r\n$ ssh-keygen -o -a 100 -t ed25519 -f id_aws -C \"nomedousuario\"\r\n\r\nObs. [https://blog.g3rt.nl/upgrade-your-ssh-keys.html](https://blog.g3rt.nl/upgrade-your-ssh-keys.html)\r\n\r\nCopie a chave pública para sua área de transferência, ela será adicionada ao servidor para o acesso SSH posteriormente\r\n\r\n$ cat ~/.ssh/id_aws.pub | pbcopy\r\n\r\nNo servidor na AWS, logado como o seu novo usuário crie a pasta .ssh na pasta raíz.\r\n\r\n$ cd ~\r\n\r\n$ mkdir .ssh\r\n\r\nAgora crie o arquivo authorized_keys e cole a chave pública criada no passo anterior.\r\n\r\n$ vi ~/.ssh/authorized_keys\r\n\r\nApós executar este processo saia do usuário **nomedousuario** digitando **exit** e em seguida saia do servidor digitando **exit** novamente.\r\n\r\nAgora vamos fazer o logon no servidor novamente, mas desta vez com a chave privada criada para o usuário.\r\n\r\n$ ssh -i ~/.ssh/id_aws -o \"IdentitiesOnly=yes\" nomedousuario@ec2-X-XXX-XXX-XXX.compute-1.amazonaws.com\r\n\r\n**Adicionando o usuário ao grupo de administradores.**\r\n\r\nusermod -aG admin **nomedousuario**\r\n\r\n3 - Instalando o NGINX\r\n\r\n$ sudo apt update\r\n\r\n$ sudo apt install nginx\r\n\r\nSe você acessar o IP público do servidor através do browser a página padrão de boas vindas do NGINX será exibida.\r\n\r\n\r\n\r\n<p id=\"gdcalert8\" ><span style=\"color: red; font-weight: bold\">>>>>>  gd2md-html alert: inline image link here (to images/image8.png). Store image on your image server and adjust path/filename/extension if necessary. </span><br>(<a href=\"#\">Back to top</a>)(<a href=\"#gdcalert9\">Next alert</a>)<br><span style=\"color: red; font-weight: bold\">>>>>> </span></p>\r\n\r\n\r\n![alt_text](images/image8.png \"image_tooltip\")\r\n\r\n\r\n**4 - Instalando o PHP 7.4**\r\n\r\n$ sudo apt-get install -y php php-cli php-fpm\r\n\r\n$ sudo apt-get install -y openssl php-common php-curl php-sqlite3 php-mysql php-json php-mbstring php-xml php-zip\r\n\r\n**Instalando o composer**\r\n\r\n$ sudo su\r\n\r\n$ curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\r\n\r\n$ sudo apt install -y zip unzip\r\n\r\nInstalar o NGINX\r\n\r\n[https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-20-04-pt](https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-redis-on-ubuntu-20-04-pt)\r\n\r\n[https://learnwithdaniel.com/2019/06/user-per-virtual-host-nginx/](https://learnwithdaniel.com/2019/06/user-per-virtual-host-nginx/)\r\n\r\nssh -i \"GeneralPurpose.pem\" ubuntu@ec2-3-236-181-148.compute-1.amazonaws.com\r\n\r\nssh -i ~/.ssh/id_aws -o \"IdentitiesOnly=yes\" juliobitencourt@ec2-3-236-181-148.compute-1.amazonaws.com\r\n\r\nusermod -aG admin \r\n\r\nsudo apt update\r\n\r\nsudo apt install nginx\r\n\r\nsudo apt install php php-fpm php-cli','2020-11-18 18:27:21','2020-11-18 18:44:12'),(21,'2020-11-18 21:09:24',NULL,'continuous-what-integracao-e-entrega-continua-de-software-entenda-as-diferencas','Continuous What? Integração e entrega contínua de software: entenda as diferenças','Quer saber tudo sobre integração e entrega contínua? Neste artigo eu faço uma explicação completa do CI/CD. Confira!','Você já colocou uma funcionalidade em produção e só depois viu que alguma coisa quebrou? Já ficou com aquela sensação: será que tem algo errado e o meu chefe, ou pior, o cliente do meu chefe só vai perceber quando eu já estiver _sextando_?\r\n\r\nDeployment de software pode causar calafrios na maioria das equipes de desenvolvimento.\r\n\r\nMas não precisa ser assim.\r\n\r\n## Qual é o problema que a integração contínua resolve?\r\n\r\nNos primórdios - quando a internet era tudo mato - a gente subia tudo por FTP, se conectava com algum _client_ de SQL para alterar o _schema_ do banco de dados na unha, testava quando dava tempo e rezava para que o que funcionava na máquina local continuasse funcionando em produção.\r\n\r\nOs tempos mudaram e a complexidade do desenvolvimento de software ganhou vários novos atores.\r\n\r\nNeste artigo eu vou apresentar os principais pilares da entrega contínua e com qualidade de software.\r\n\r\n### O que vamos abordar\r\n\r\n\r\n*   Testes automatizados\r\n*   Integração contínua\r\n*   Entrega contínua e deployments frequentes\r\n*   Estratégias de release\r\n\r\n## Testes automatizados\r\n\r\nUma coisa é fato: alguém vai testar seu código!\r\n\r\nNão importa se é TDD, se você escreve os testes antes ou depois do código de implementação, se é unitário ou de integração. Alguém vai testar seu software.\r\n\r\nPode ser código testantado código, pode ser você manualmente, pode ser um analista de QA ou pode ser o cliente ?\r\n\r\nTestes manuais podem falhar pois humanos falham o tempo todo. Já os testes automatizados são valiosos no longo prazo.\r\n\r\nAs principais objeções ao uso de testes automatizados é a sensação de perda de tempo. Afinal poderíamos estar escrevendo código “real” ao invés de código que não faz parte das funcionalidades.\r\n\r\nMas vem comigo: quando você precisar preencher aquele formulário de cadastro com 30 campos pela décima vez vai praguejar por não ter escrito um teste automatizado antes.\r\n\r\n## O que é a integração contínua?\r\n\r\nSe você já ouviu falar em **The Twelve-Factor App** sabe que deveria desenvolver seus sistemas utilizando uma [base de código com rastreabilidade e controle de versão](https://12factor.net/pt_br/codebase).\r\n\r\nIntegração contínua (ou continuous integration - CI) é a prática de enviar seu código - integrar - para o repositório compartilhado várias vezes durante o processo de desenvolvimento e encontrar e corrigir problemas rapidamente e de forma automática.\r\n\r\nVocê sabe que problemas de integração são um grande gargalo para a entrega de software e a integração contínua é a ferramenta ideal para aumentar a qualidade e a agilidade diminuindo o retrabalho e o estresse.\r\n\r\nImagine o seguinte cenário: você trabalha durante uma semana inteira em uma funcionalidade e ao término desse árduo período [abre o pull request perfeito](https://juliobitencourt.dev/como-criar-um-pull-request-perfeito) e envia seu código para produção.\r\n\r\nMas antes de ir para produção esse código precisa ser analisado por outros membros da equipe que provavelmente vão executar todo o sistema - e não só a funcionalidade que você fez - em um ambiente de testes.\r\n\r\nNeste momento várias inconsistências (bugs mesmo!) são encontradas, pois o código que você escreveu sofre o impacto de funcionalidades escritas por outros desenvolvedores e desenvolvedoras durante o mesmo período e você vai precisar passar algumas horas corrigindo esses problemas.\r\n\r\n“A integração contínua não vai te livrar dos _bugs_, mas os torna muito mais fáceis de encontrar e remover.”\r\n\r\n— Martin Fowler\r\n\r\nIntegração contínua é uma prática muito comum nos dias atuais, mesmo assim me deparo com muitos desenvolvedores e desenvolvedoras que não entendem bem como isto funciona e como implementar no ambiente de trabalho.\r\n\r\nBasicamente funciona assim.\r\n\r\nA cada etapa do desenvolvimento você envia o seu código para o repositório remoto. Isto mesmo que você está pensando: git push.\r\n\r\nNeste momento, um serviço automático de integração vai analisar o seu código conforme as regras definidas para criação de uma build.\r\n\r\nExemplos:\r\n\r\n*   Montagem de um ambiente o mais próximo possível do de produção\r\n*   Criação de um banco de dados de teste\r\n*   Instalação de dependências\r\n*   Execução de testes automatizados.\r\n*   Compilação de binários\r\n\r\nCaso alguma coisa falhe em qualquer uma destas etapas você será avisado imediatamente e poderá corrigir o problema.\r\n\r\nExemplo:\r\n\r\n[Tutorial: Integração Contínua com Laravel e Bitbucket Pipelines](https://juliobitencourt.dev/integracao-continua-com-laravel-e-bitbucket-pipelines)\r\n\r\nCaso esteja tudo certo você continua o desenvolvimento e quando terminar a nova funcionalidade e ou a correção de algum bug seu código poderá avançar no pipeline de entrega contínua como veremos a seguir.\r\n\r\n## A Entrega contínua ou Continuous Delivery\r\n\r\nPode confessar: todos nós sentimos um frio na barriga antes de lançar uma nova versão de nossos sites e sistemas.\r\n\r\nEsse stress no momento do deployment é natural e pode ser minimizado com a adoção de boas práticas de entrega contínua de software.\r\n\r\n\"A entrega contínua é a capacidade de colocar mudanças de todos os tipos - incluindo novos recursos, mudanças de configuração, correções de bugs e experimentos - na produção ou nas mãos dos usuários, com segurança e rapidez de forma sustentável.\"\r\n—   https://continuousdelivery.com/\r\n\r\nDentre as vantagens que podemos destacar na entrega contínua está o fato de que ela acelera o processo de identificação de bugs. Isto é muito importante, pois quanto mais demoramos para encontrar um bug, maior é o custo de correção.\r\n\r\nUma boa prática é a de utilizar deployments atômicos. Que consiste em instalar a nova versão em um ambiente totalmente separado da versão de produção, executar uma sequência de testes automatizados e somente depois que tudo estiver funcionando perfeitamente liberar esta versão para uso dos clientes.\r\n\r\n### Confira algumas estratégias de release\r\n\r\n*   [Canary Release](https://martinfowler.com/bliki/CanaryRelease.html)\r\n*   [Feature Flags ou Feature Toggles](https://martinfowler.com/articles/feature-toggles.html)\r\n*   [Blue Green Deployment](https://martinfowler.com/bliki/BlueGreenDeployment.html)\r\n\r\n## Conclusão\r\n\r\nNão há nada melhor que terminar uma funcionalidade e saber que foram dados todos os passos para garantir a qualidade final do produto.\r\n\r\nUm motivo a menos para alguém nos acordar de madrugada pois o sistema caiu.\r\n\r\nObrigado pela leitura!\r\n\r\n### Referências\r\n\r\n- [https://12factor.net/]\r\n- [https://www.thoughtworks.com/pt/continuous-integration](https://www.thoughtworks.com/pt/continuous-integration)\r\n- [https://spinupwp.com/wordpress-deployment-workflow-preparing/](https://spinupwp.com/wordpress-deployment-workflow-preparing/)\r\n- [https://buddy.works/guides/laravel-in-docker](https://buddy.works/guides/laravel-in-docker)\r\n- [https://martinfowler.com/articles/branching-patterns.html#release-ready-mainline](https://martinfowler.com/articles/branching-patterns.html#release-ready-mainline)\r\n- [https://dev.to/alexbunardzic/benefits-of-frequent-deployments-44ah](https://dev.to/alexbunardzic/benefits-of-frequent-deployments-44ah)\r\n- [https://devops.com/fighting-deployment-anxiety-5-tips/](https://devops.com/fighting-deployment-anxiety-5-tips/)\r\n- [https://www.celerity.com/the-true-cost-of-a-software-bug]\r\n\r\n<hr>','2020-11-18 20:54:37','2020-11-18 21:09:32'),(22,'2020-11-19 12:39:14',NULL,'tailwind-css-20-a-nova-versao-do-framework-css-queridinho-do-momento','Tailwind CSS 2.0. A nova versão do framework CSS queridinho do momento','A nova versão do Tailwind CSS chegou com muitas novidades. Confira tudo no meu blog!','<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">It&#39;s real, and it&#39;s spectacular.<a href=\"https://t.co/yyKqWt05he\">https://t.co/yyKqWt05he</a> <a href=\"https://t.co/5QBUkBxkgU\">pic.twitter.com/5QBUkBxkgU</a></p>&mdash; Tailwind CSS (@tailwindcss) <a href=\"https://twitter.com/tailwindcss/status/1329129585024372741?ref_src=twsrc%5Etfw\">November 18, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\r\n\r\n> It\'s real, and it\'s spectacular.\r\n\r\nFoi assim, cheio de pompa e elegância que a nova versão do [Tailwind CSS](https://tailwindcss.com/) foi apresentada.\r\n\r\nAntes de prosseguirmos, vale ressaltar que o Tailwind é um framework utility first. O que causa bastante controvérsia na comunidade dev.\r\n\r\nTem quem [critica](https://block81.com/blog/why-i-havent-jumped-on-the-tailwind-css-bandwagon) e depois [muda de ideia](https://block81.com/blog/all-aboard-the-tailwind-css-bandwagon), tem [quem gosta]() e tem quem [gosta muito](https://dev.to/matfrana/why-i-love-tailwind-css-3gek)!\r\n\r\nEu, particularmente, gosto muito e já utilizo em vários projetos antes mesmo da versão 1.0 - inclusive este blog usa Tailwind.\r\n\r\nO próprio Adam Wathan, criador do framework, escreveu um longo e detalhado artigo explicando o seu ponto de vista sobre o assunto.\r\n\r\n[CSS Utility Classes and \"Separation of Concerns\"](https://adamwathan.me/css-utility-classes-and-separation-of-concerns/)\r\n\r\nRealmente a nova versão trás muitas novidades (Dark Mode ?), como seria de se esperar em uma major. Inclusive um novo - e muito bonito - web site.\r\n\r\n## Lista de novidades da versão 2.0 do Tailwind CSS\r\n\r\n- Paleta de cores totalmente nova, com 220 cores no total e um novo fluxo de trabalho para criar seus próprios esquemas de cores\r\n- Suporte ao modo escuro, tornando mais fácil do que nunca alterar dinamicamente o seu design quando o modo escuro está ativado\r\n- *Breakpoint* extra largo 2XL, para projeto de 1536px e acima\r\n- Novos utilitários de *outline*, que são quase tão bons como se fossem apenas tornar o *outline-radius* uma coisa real\r\n- Estilos de formulário amigáveis, uma nova redefinição de formulário que torna mais fácil personalizar os elementos do formulário (até mesmo caixas de seleção) apenas com *utility-classes*\r\n- Altura de linha padrão por tamanho de fonte, porque se não podemos tornar ilegal o uso de uma altura de linha de 1,5 com uma fonte de 48px, devemos pelo menos torná-la não a padrão\r\n- Espaçamento estendido, tipografia e escalas de opacidade, para ajustar as coisas no nível micro, causando um impacto ainda maior com manchetes enormes e para quando a opacidade-25 não for suficiente e a opacidade-50 for demais\r\n- Use @apply com qualquer coisa, incluindo responsivo, foco e outras variantes\r\n- Novos utilitários de *overflow* de texto, para controlar as coisas com mais precisão do que você pode com o *truncate* sozinho\r\n- Estenda as variantes, para que você possa habilitar variantes extras, como o foco visível, sem redeclarar a lista inteira ou pensar sobre a ordenação\r\n- *Group-focus* e *focus-within* por padrão, porque você estava ativando-os em todos os projetos de qualquer maneira\r\n- Duração de transição padrão e curva de atenuação, então você só precisa adicionar 17 classes para fazer um botão em vez de 19 ???\r\n- Incompatibilidade com o IE11, então você pode dizer ao seu chefe \"desculpe, chefe, está fora de minhas mãos, culpe o Tailwind\"\r\n\r\nVocê pode conferir todas as novidades acessando em [https://blog.tailwindcss.com/tailwindcss-v2](https://blog.tailwindcss.com/tailwindcss-v2)\r\n\r\nE você? Usa o Tailwind? Gosta? Odeia? Deixe suas opiniões nos comentários!','2020-11-19 12:32:11','2020-11-19 12:39:19'),(23,'2020-11-25 18:49:33','pt-BR','como-criar-um-servidor-ubuntu-php-e-nginx-na-aws','Como criar um servidor Ubuntu, PHP e Nginx na AWS','Aprenda como provisionar um servidor Ubuntu 20.4 com PHP 7.4 e NGINX na AWS nesse tutorial prático!','Provisionamento de infraestrutura é uma das tarefas mais comuns quando começamos a trabalhar com DevOps.\r\n\r\nVocê pode automatizar todo este processo com ferramentas como Ansible, Terraform ou similares, ou ainda, rodar todos esses serviços em containers Docker.\r\n\r\nMas eu acredito que criar esta configuração de forma manual é muito importante para que você saiba o que será automatizado e posteriormente passe a utilizar algumas das ferramentas citadas acima.\r\n\r\n## Como criar uma nova instância na AWS para a nossa stack de desenvolvimento PHP\r\n\r\nSe você ainda não usa AWS, é possível criar uma conta com 12 meses grátis para a utilização de muitos recursos, dentro de um limite. Fique atento ao limite de utilização gratuita de cada serviço, para não ter surpresas com a conta no final do mês!\r\n\r\nCriar uma instância no serviço EC2 da AWS não é difícil.\r\n\r\nVamos escolher uma imagem dentre as várias disponíveis. Para este artigo usaremos a imagem Ubuntu 20.04 (Focal) LTS.\r\n\r\n<div class=\"mx-auto w-full border-solid border-2 border-gray-600\"><img alt=\"Menu Bitbucket\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/0-como-criar-um-servidor-ubuntu-php-e-nginx-na-aws-ubuntu-20.04.png\" /></div>\r\n\r\nEm seguida definimos o tipo da instância. No nosso caso usaremos uma instância elegível para utilização na camada gratuita.\r\n\r\n<div class=\"mx-auto w-full border-solid border-2 border-gray-600\"><img alt=\"Menu Bitbucket\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/1-como-criar-um-servidor-ubuntu-php-e-nginx-na-aws-aws-instance-type.png\" /></div>\r\n\r\n\r\nEsta configuração conta com 1GB de memória RAM, o que é suficiente para um servidor básico.\r\n\r\nNa configuração de grupos de segurança, criamos um novo grupo com acesso nas portas 80 para tráfego HTTP e 22 para acesso SSH a partir do seu computador local.\r\n\r\n<div class=\"mx-auto w-full border-solid border-2 border-gray-600\"><img alt=\"Menu Bitbucket\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/2-como-criar-um-servidor-ubuntu-php-e-nginx-na-aws-setting-security-group.png\" /></div>\r\n\r\nPor último vamos criar ou selecionar um par de chaves de acesso. Este par de chaves funciona da seguinte forma: uma chave pública fica armazenada na AWS e uma chave privada fica armazenada no seu computador através de um arquivo com a extensão **pem**.\r\n\r\nEste passo é muito importante. Caso você perca o acesso à chave privada no seu computador o servidor poderá ficar inacessível. Veremos a frente como configurar o acesso ao servidor de uma forma mais adequada.\r\n\r\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Menu Bitbucket\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/4-como-criar-um-servidor-ubuntu-php-e-nginx-na-aws-selecting-key-pair.png\" /></div>\r\n\r\nClique em \"Lauch Instances\" a aguarde a criação da instância.\r\n\r\n## Acessando o servidor via SSH com a chave privada\r\n\r\nAcesse a lista de instâncias no painel da AWS e clique com o botão direito sobre a que foi criada no passo 1. Em seguida clique em Connect.\r\n\r\n<div class=\"mx-auto w-6/12 border-solid border-2 border-gray-600\"><img alt=\"Menu Bitbucket\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/5-como-criar-um-servidor-ubuntu-php-e-nginx-na-aws-connect-to-instance.png\" /></div>\r\n\r\nAs instruções de conexão serão exibidas. Perceba que você precisará atribuir permissões específicas para a chave privada através do comando _chmod_ mostrado abaixo.\r\n\r\n<div class=\"mx-auto w-10/12 border-solid border-2 border-gray-600\"><img alt=\"Menu Bitbucket\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/6-como-criar-um-servidor-ubuntu-php-e-nginx-na-aws-connect-to-instance.png\" /></div>\r\n\r\nObs. Você deverá substituir o endereço do servidor pelo endereço que estiver sendo exibido no seu ambiente na AWS.\r\n\r\nAtribua as permissões corretas conforme instruções da AWS.\r\n\r\n<pre><code class=\"shell text-sm\">$ chmod 400 SuaChave.pem</code></pre>\r\n\r\nApós atribuir a permissão correta, digite comando abaixo para se conectar ao servidor.\r\n\r\n<pre><code class=\"shell text-sm\">$ ssh -i \"SuaChave.pem\" [ubuntu@ec2-X-XXX-XXX-XXX.compute-1.amazonaws.com](mailto:ubuntu@ec2-X-XXX-XXX-XXX.compute-1.amazonaws.com)</code></pre>\r\n\r\nSe tudo deu certo agora você está acessando o terminal da instância Ubuntu 20.04 na AWS.\r\n\r\nPara se certificar que está na versão correta digite\r\n\r\n<pre><code class=\"shell text-sm\">$ cat /etc/os-release</code></pre>\r\n\r\nVocê deverá ver a seguinte saída no terminal.\r\n\r\n<div class=\"mx-auto w-full border-solid border-2 border-gray-600\"><img alt=\"Menu Bitbucket\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/7-como-criar-um-servidor-ubuntu-php-e-nginx-na-aws-cat-release-output.png\" /></div>\r\n\r\n## Configurando um usuário administrador\r\n\r\nCriando o usuário que será utilizado no dia a dia dentro do servidor\r\n\r\n<pre><code class=\"shell text-sm\">$ sudo adduser nomedousuario\r\n\r\nAdding user `nomedousuario ...\r\nAdding new group `nomedousuario (1001) ...\r\nAdding new user `nomedousuario (1001) with group `nomedousuario ...\r\nCreating home directory `/home/nomedousuario ...\r\nCopying files from `/etc/skel\' ...\r\nNew password:\r\nRetype new password:\r\npasswd: password updated successfully\r\nChanging the user information for nomedousuario\r\nEnter the new value, or press ENTER for the default\r\n	Full Name []:\r\n	Room Number []:\r\n	Work Phone []:\r\n	Home Phone []:\r\n	Other []:\r\nIs the information correct? [Y/n] Y\r\n</code></pre>\r\n\r\nTroque o usuário para o que acabou de ser criado\r\n\r\n<pre><code class=\"shell text-sm\">$ sudo su nomedousuario\r\n$ cd ~/\r\n$ pwd\r\n</code></pre>\r\n\r\nVeja a saída **/home/nomedousuario**\r\n\r\nConfigurando o acesso SSH para o novo usuário\r\n\r\nCrie um novo par de chaves no seu computador local\r\n\r\n<pre><code class=\"shell text-sm\">$ ssh-keygen -o -a 100 -t ed25519 -f id_aws -C \"nomedousuario\"\r\n</code></pre>\r\n\r\nObs. [https://blog.g3rt.nl/upgrade-your-ssh-keys.html](https://blog.g3rt.nl/upgrade-your-ssh-keys.html)\r\n\r\nCopie a chave pública para sua área de transferência, ela será adicionada ao servidor para o acesso SSH posteriormente\r\n\r\n<pre><code class=\"shell text-sm\">$ cat ~/.ssh/id_aws.pub | pbcopy\r\n</code></pre>\r\n\r\nNo servidor na AWS, logado como o seu novo usuário crie a pasta .ssh na pasta raíz.\r\n\r\n<pre><code class=\"shell text-sm\">$ cd ~\r\n</code></pre>\r\n\r\n<pre><code class=\"shell text-sm\">$ mkdir .ssh\r\n</code></pre>\r\n\r\nAgora crie o arquivo authorized_keys e cole a chave pública criada no passo anterior.\r\n\r\n<pre><code class=\"shell text-sm\">$ vi ~/.ssh/authorized_keys\r\n</code></pre>\r\n\r\nApós executar este processo saia do usuário **nomedousuario** digitando **exit** e em seguida saia do servidor digitando **exit** novamente.\r\n\r\nAgora vamos fazer o logon no servidor novamente, mas desta vez com a chave privada criada para o usuário.\r\n\r\n<pre><code class=\"shell text-sm\">$ ssh -i ~/.ssh/id_aws -o \"IdentitiesOnly=yes\" nomedousuario@ec2-X-XXX-XXX-XXX.compute-1.amazonaws.com\r\n</code></pre>\r\n\r\n### Adicionando o usuário ao grupo de administradores.\r\n\r\n<pre><code class=\"shell text-sm\">$ usermod -aG admin **nomedousuario**\r\n</code></pre>\r\n\r\n## Instalando o NGINX\r\n\r\n<pre><code class=\"shell text-sm\">$ sudo apt update\r\n$ sudo apt install nginx\r\n</code></pre>\r\n\r\nSe você acessar o IP público do servidor através do browser a página padrão de boas vindas do NGINX será exibida.\r\n\r\n<div class=\"mx-auto w-8/12 border-solid border-2 border-gray-600\"><img alt=\"Menu Bitbucket\" src=\"https://juliobitencourt-dev-assets.s3.amazonaws.com/images/8-como-criar-um-servidor-ubuntu-php-e-nginx-na-aws-welcome-to-nginx.png\" /></div>\r\n\r\n## Instalando o PHP 7.4\r\n\r\n<pre><code class=\"shell text-sm\">$ sudo apt-get install -y php php-cli php-fpm\r\n$ sudo apt-get install -y openssl php-common php-curl php-sqlite3 php-mysql php-json php-mbstring php-xml php-zip\r\n</code></pre>\r\n\r\n## Instalando o composer\r\n\r\n<pre><code class=\"shell text-sm\">$ sudo su\r\n$ curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer\r\n</code></pre>\r\n\r\nEntão é isso. Este artigo não cobriu alguns pontos importantes como configurações de segurança e configurações do NGINX para servir sites no servidor. Caso você se interesse por esses assuntos, deixe um comentário para que eu possa aborda-los no futuro','2020-11-25 17:55:47','2021-02-01 16:57:56'),(24,'2021-02-01 16:54:33','pt-BR','como-a-internet-funciona-entendendo-o-protocolo-http','Como a internet funciona? Entendendo o protocolo HTTP','Como todo protocolo, o HTTP define regras de comunicação entre dois pontos. Como o seu navegador e um servidor por exemplo.','O HTTP é um protocolo.\r\n\r\nComo todo protocolo, o HTTP define regras de comunicação entre dois pontos. Como o seu navegador e um servidor por exemplo.\r\n\r\nQuando você visita uma página na web você está enviando uma requisição HTTP e toda requisição HTTP deve ter uma resposta.\r\n\r\nNo trecho abaixo percebam que uma requisição foi feita ao endereço localhost, que neste caso é o servidor web que está sendo executado em minha máquina local apenas para testes. Em exemplos reais você poderia acessar qualquer site da internet através de uma URL pública ou através de autenticação.\r\n\r\nNo final do artigo eu coloquei duas ferramentas muito úteis para testar requisições HTTP utilizando o Curl consumindo dados no formato JSON.\r\n\r\n\r\n\r\nAtenção aos trechos **GET**, **HTTP/1.1** e **200 OK**\r\n\r\nGET é o método HTTP, onde a requisição diz ao destinatário **localhost** que ela quer pegar uma informação (GET).\r\n\r\n![alt text](https://juliobitencourt-dev-assets.s3.amazonaws.com/images/requisicao-http-get.png \"Requisição HTTP GET\")\r\n\r\n**HTTP/1.1** e **200 OK** pertencem à resposta do servidor e mostram a versão do HTTP que está sendo utilizada e o status de retorno. Veja os demais status aqui Right pointing backhand index [https://httpstatuses.com](https://httpstatuses.com)\r\n\r\n## O que são os métodos HTTP?\r\n\r\nAlguns outros métodos: POST para criar alguma informação, PUT/PATCH para alterar, DELETE para remover, e assim por diante\r\n\r\nUsando os métodos, que também são conhecidos como verbos, o servidor pode tomar decisões sobre o que fazer quando um endereço é acessado.\r\n\r\nAbaixo as requisições para hipoteticamente retornar os dados de um cliente, alterar os dados do mesmo e a última remove o o cliente.\r\n\r\n![alt text](https://juliobitencourt-dev-assets.s3.amazonaws.com/images/requisicao-http-get-2.png \"Requisição HTTP GET\")\r\n\r\nOutros pontos muito importantes de uma requisição HTTP são os cabeçalhos **headers** e o corpo **body**\r\n\r\n## Como enviar uma requisição HTTP com cabeçalhos?\r\n\r\nAbaixo um exemplo de requisição com um cabeçalho.\r\n\r\n![alt text](https://juliobitencourt-dev-assets.s3.amazonaws.com/images/requisicao-http-com-cabecalhos.png \"Requisição HTTP passando um cabeçalho (Header)\")\r\n\r\n## Como enviar uma requisição Post HTTP?\r\n\r\nE por último, uma requisição com o método POST para simular um login. Pense em username e password como campos de um formulário HTML.\r\n\r\n![alt text](https://juliobitencourt-dev-assets.s3.amazonaws.com/images/requisicao-http-post.png \"Requisição HTTP Post\")\r\n\r\nPara os exemplos eu usei o curl [https://curl.se](https://curl.se) mas você pode usar o Postman para usar uma interface gráfica e brincar com vários tipos de requisições HTTP.\r\n\r\n![alt text](https://juliobitencourt-dev-assets.s3.amazonaws.com/images/requisicao-usando-postman.png \"Requisição HTTP usando Postman\")\r\n\r\n## 2 ferramentas muito úteis para testes de requisições HTTP\r\n\r\n### {JSON} Placeholder - API fake para testes e criação de protótipos\r\n\r\nO [JSON Placeholder](https://jsonplaceholder.typicode.com/) é uma ferramenta bem legal. Com ele você consegue criar um pequeno servidor com conteúdo JSON para testes bem como testar alguns **endpoints** pré definidos.\r\n\r\n![alt text](https://juliobitencourt-dev-assets.s3.amazonaws.com/images/requisicao-http-json-placeholder.png \"Exemplo Curl utilizando o JSON Placeholder\")\r\n\r\n## Curl Builder\r\n[Curl Builder](https://curlbuilder.com/) é outra ferramenta bem legal e também é muito simples de usar. Basta preencher alguns campos como o método HTTP, a URL, adicionar cabeçalhos e pronto: a requisição HTTP via Curl é exibida para você copiar e testar em seu terminal.\r\n\r\n![alt text](https://juliobitencourt-dev-assets.s3.amazonaws.com/images/print-curl-builder.png \"Exemplo Curl Builder\")','2021-02-01 16:51:44','2021-02-16 17:27:11');
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `users` (
  `id` bigint unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,
  `remember_token` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `users_email_unique` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
INSERT INTO `users` VALUES (1,'Julio Bitencourt','julio@contagia.com.br','2020-11-11 19:34:37','$2y$10$5gl2.UZkhlwKjUXGqBLYjOiloVscs85Y30nYhCLGediFbcitd4h/O',NULL,'2020-11-18 18:23:29','2020-11-19 12:03:15');
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2021-08-29 14:33:50
